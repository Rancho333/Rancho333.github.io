<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Rancho Blog</title>
    <link>https://rancho333.github.io/</link>
    
    <atom:link href="https://rancho333.github.io/rss2.xml" rel="self" type="application/rss+xml"/>
    
    <description>No pain, no gain!</description>
    <pubDate>Mon, 05 Sep 2022 02:15:59 GMT</pubDate>
    <generator>http://hexo.io/</generator>
    
    <item>
      <title>使用ixia对sonic进行L2,3打流测试</title>
      <link>https://rancho333.github.io/2022/09/02/%E4%BD%BF%E7%94%A8ixia%E5%AF%B9sonic%E8%BF%9B%E8%A1%8CL2-3%E6%89%93%E6%B5%81%E6%B5%8B%E8%AF%95/</link>
      <guid>https://rancho333.github.io/2022/09/02/%E4%BD%BF%E7%94%A8ixia%E5%AF%B9sonic%E8%BF%9B%E8%A1%8CL2-3%E6%89%93%E6%B5%81%E6%B5%8B%E8%AF%95/</guid>
      <pubDate>Fri, 02 Sep 2022 07:22:01 GMT</pubDate>
      
      <description>&lt;h1 id=&quot;环境说明&quot;&gt;&lt;a href=&quot;#环境说明&quot; class=&quot;headerlink&quot; title=&quot;环境说明&quot;&gt;&lt;/a&gt;环境说明&lt;/h1&gt;&lt;p&gt;实验拓扑如图：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://rancho333.github.io/pictures/ixia_sonic_topology.png&quot;&gt;&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<h1 id="环境说明"><a href="#环境说明" class="headerlink" title="环境说明"></a>环境说明</h1><p>实验拓扑如图：</p><p><img src="https://rancho333.github.io/pictures/ixia_sonic_topology.png"></p><span id="more"></span><p>线连接好后，ixia上做些配置使端口up。sonic上link training和auto negotiation默认关闭，FEC开启。在ixia上对应接口做设置与之匹配。</p><p><img src="https://rancho333.github.io/pictures/ixia_port_up.png"></p><p>确认端口up:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">root@localhost:&#x2F;home&#x2F;admin# show interfaces status Ethernet49</span><br><span class="line">  Interface        Lanes    Speed    MTU    FEC    Alias    Vlan    Oper    Admin             Type    Asym PFC</span><br><span class="line">-----------  -----------  -------  -----  -----  -------  ------  ------  -------  ---------------  ----------</span><br><span class="line"> Ethernet49  41,42,43,44     100G   9216     rs    etp49  routed      up       up  QSFP28 or later         N&#x2F;A</span><br><span class="line">root@localhost:&#x2F;home&#x2F;admin# show interfaces status Ethernet50</span><br><span class="line">  Interface        Lanes    Speed    MTU    FEC    Alias    Vlan    Oper    Admin             Type    Asym PFC</span><br><span class="line">-----------  -----------  -------  -----  -----  -------  ------  ------  -------  ---------------  ----------</span><br><span class="line"> Ethernet50  45,46,47,48     100G   9216     rs    etp50  routed      up       up  QSFP28 or later         N&#x2F;A&#x3D;</span><br></pre></td></tr></table></figure><h1 id="二层打流"><a href="#二层打流" class="headerlink" title="二层打流"></a>二层打流</h1><p>ixia eth7端口发出二层报文，sonic两个端口在同一vlan，ixia eth8端口接收报文进行数据统计，检查是否丢包。同理eth8发包，eth7收包。这样就实现双向二层线速打流测试。详细步骤如下：</p><p>sonic配置：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">config vlan add 78</span><br><span class="line">config vlan member add -u 78 Ethernet49</span><br><span class="line">config vlan member add -u 78 Ethernet50</span><br><span class="line"></span><br><span class="line">确认vlan配置：</span><br><span class="line">root@localhost:&#x2F;home&#x2F;admin# show vlan brief </span><br><span class="line">+-----------+--------------+------------+----------------+-------------+-----------------------+</span><br><span class="line">|   VLAN ID | IP Address   | Ports      | Port Tagging   | Proxy ARP   | DHCP Helper Address   |</span><br><span class="line">+&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;+&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;+&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;+&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;+&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;+&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;+</span><br><span class="line">|        78 |              | Ethernet49 | untagged       | disabled    |                       |</span><br><span class="line">|           |              | Ethernet50 | untagged       |             |                       |</span><br></pre></td></tr></table></figure><p>ixia进行如下配置：<br>如图分别将eth7, eth8创建成L2接口：<br><img src="https://rancho333.github.io/pictures/ixia_l2_port.png"></p><p>之后创建二层流：<br><img src="https://rancho333.github.io/pictures/ixia_l2_traffic.png"></p><p>图示是eth7发送，eth8接收检查，同理创建反向流，实现双向打流测试。注意最好修改二层报文的源目mac地址。</p><p>最后打流测试：<br><img src="https://rancho333.github.io/pictures/ixia_l2_traffic_loss.png"></p><h1 id="三层打流"><a href="#三层打流" class="headerlink" title="三层打流"></a>三层打流</h1><p>ixia eth7,8设置为三层接口，网关指向sonic，创建两条流分别：src为eth7，dst为eth8； src为eth8,dst为eth7.这样就实现双向三层线速打流测试。详细步骤如下：</p><p>sonic配置：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">config interface ip add Ethernet49 10.1.1.2&#x2F;24 </span><br><span class="line">config interface ip add Ethernet50 10.1.2.2&#x2F;24</span><br><span class="line"></span><br><span class="line">确认配置：</span><br><span class="line">root@localhost:&#x2F;home&#x2F;admin# show ip interfaces </span><br><span class="line">Interface    Master    IPv4 address&#x2F;mask    Admin&#x2F;Oper    BGP Neighbor    Neighbor IP</span><br><span class="line">-----------  --------  -------------------  ------------  --------------  -------------</span><br><span class="line">Ethernet49             10.1.1.2&#x2F;24          up&#x2F;up         N&#x2F;A             N&#x2F;A</span><br><span class="line">Ethernet50             10.1.2.2&#x2F;24          up&#x2F;up         N&#x2F;A             N&#x2F;A</span><br></pre></td></tr></table></figure><p>ixia进行如下配置：<br>如图所示分别将eth7,eth8创建成L3接口：<br><img src="https://rancho333.github.io/pictures/ixia_l3_port.png"></p><p>然后依次为两个接口配置ip地址和gateway:<br><img src="https://rancho333.github.io/pictures/ixia_l3_port_ip.png"></p><p>将拓扑使能之后，测试网络的连通性：<br><img src="https://rancho333.github.io/pictures/ixia_l3_port_ping.png"></p><p>之后创建L3流，图上所示是eth7到eth8的流，同理创建eth8到eth7的流：<br><img src="https://rancho333.github.io/pictures/ixia_l3_traffic.png"></p><p>注意和L2的数据流不同，L3不需要手动修改报文的src mac，dst mac等字段，会自动配置。</p><p>最后打流测试，查看丢包情况：<br><img src="https://rancho333.github.io/pictures/ixia_l3_traffic_loss.png"></p>]]></content:encoded>
      
      
      
      
      <comments>https://rancho333.github.io/2022/09/02/%E4%BD%BF%E7%94%A8ixia%E5%AF%B9sonic%E8%BF%9B%E8%A1%8CL2-3%E6%89%93%E6%B5%81%E6%B5%8B%E8%AF%95/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>半自动化批量保存网页</title>
      <link>https://rancho333.github.io/2022/08/24/%E5%8D%8A%E8%87%AA%E5%8A%A8%E5%8C%96%E6%89%B9%E9%87%8F%E4%BF%9D%E5%AD%98%E7%BD%91%E9%A1%B5/</link>
      <guid>https://rancho333.github.io/2022/08/24/%E5%8D%8A%E8%87%AA%E5%8A%A8%E5%8C%96%E6%89%B9%E9%87%8F%E4%BF%9D%E5%AD%98%E7%BD%91%E9%A1%B5/</guid>
      <pubDate>Wed, 24 Aug 2022 06:28:35 GMT</pubDate>
      
        
        
      <description>&lt;p&gt;使用两个工具&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;web scraper 批量获取文章的链接，导出为csv文件&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;SingleFile 批量下载链接网页  &lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
</description>
        
      
      
      
      <content:encoded><![CDATA[<p>使用两个工具</p><ol><li><p>web scraper 批量获取文章的链接，导出为csv文件</p></li><li><p>SingleFile 批量下载链接网页  </p></li></ol>]]></content:encoded>
      
      
      
      
      <comments>https://rancho333.github.io/2022/08/24/%E5%8D%8A%E8%87%AA%E5%8A%A8%E5%8C%96%E6%89%B9%E9%87%8F%E4%BF%9D%E5%AD%98%E7%BD%91%E9%A1%B5/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>IPSec简述</title>
      <link>https://rancho333.github.io/2022/08/01/IPSec%E7%AE%80%E8%BF%B0/</link>
      <guid>https://rancho333.github.io/2022/08/01/IPSec%E7%AE%80%E8%BF%B0/</guid>
      <pubDate>Mon, 01 Aug 2022 06:26:57 GMT</pubDate>
      
      <description>&lt;h1 id=&quot;写在前面&quot;&gt;&lt;a href=&quot;#写在前面&quot; class=&quot;headerlink&quot; title=&quot;写在前面&quot;&gt;&lt;/a&gt;写在前面&lt;/h1&gt;&lt;p&gt;在&lt;a href=&quot;https://rancho333.github.io/2022/07/29/GRE%E7%AE%80%E8%BF%B0/&quot;&gt;GRE简述&lt;/a&gt;中描述了一种vpn的实现，但是GRE没有认证，加密，数据完整性验证等特性，是一个不安全的封装协议，所以实际使用中都是结合IPSec一起。本文介绍VPN的第二种常见实现——IPSec.&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<h1 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h1><p>在<a href="https://rancho333.github.io/2022/07/29/GRE%E7%AE%80%E8%BF%B0/">GRE简述</a>中描述了一种vpn的实现，但是GRE没有认证，加密，数据完整性验证等特性，是一个不安全的封装协议，所以实际使用中都是结合IPSec一起。本文介绍VPN的第二种常见实现——IPSec.</p><span id="more"></span><h1 id="IPSec简介"><a href="#IPSec简介" class="headerlink" title="IPSec简介"></a>IPSec简介</h1><p>IPSec通过认证头AH(authentication header, 协议号51)和封装安全载荷ESP(encapsulating security payload)这两个安全协议来实现。此外可以通过IKE(internet key exchange)完成密钥交换。一般场景使用IKE自动管理密钥交换，SA建立，使用ESP进行报文验证和加密。</p><p>IPSec有两种封装模式：</p><ul><li>传输模式：在传输模式下，AH或ESP被插入到IP头之后但在所有传输层协议之前，或所有其它IPSec协议之前。</li><li>隧道模式：在隧道模式下，AH或ESP插在原始IP头之前，另外生成一个新的IP头放在AH或ESP之前。</li></ul><p>传输模式用于两台主机之间的通讯，或者一台主机和一个安全网关之间的通讯。在传输模式下，对报文加密和解密的两台设备本身必须是报文的原始发送者和最终接收者。</p><p>通常，在两个安全网关之间的数据流量，绝大部分都不是安全网关本身的流量，因此安全网关之间一般不使用传输模式，而是使用隧道模式。在一个安全网关被加密的报文，只有另一个安全网关才能被解密。</p><p>IPSec的两大核心功能分别是<em>加密</em>和<em>认证</em>，ipsec使用对称加密算法，主要包括DES、3DES和AES。对于认证，在发送消息之前会先使用验证算法和验证密钥对消息进行处理，得到报文摘要；另一方收到消息后同样计算摘要，然后对比两端的摘要，如果相同则消息没有被篡改。常用的验证算法有MD5和SHA系列。</p><p>AH(IP协议号51)可提供数据源验证和数据完整性校验功能；<br>ESP(IP协议号50)除提供数据源验证和数据完整性校验功能外，还提供对IP报文的加密功能。ESP的工作原理是在每一个数据包的标准IP包头后面添加一个ESP报文头，并在数据包后面追加一个ESP尾。与AH协议不同的是，ESP将需要保护的报文进行加密后再封装到IP包中，以保证数据的机密性。</p><p>两者均可单独使用，也可一起配合使用。各自作用范围如下图所示：<br><img src="https://rancho333.github.io/pictures/ipsec_range.png"></p><p>可见，AH提供的认证服务要强于ESP，同时使用AH和ESP时，设备支持的AH和ESP联合使用方式为：先对报文进行ESP封装，再对报文进行AH封装，封装之后的报文从内到外一次是原始IP报文，ESP报文头，AH报文头和外部IP头。</p><p>IPSec除了能为其它隧道协议提供数据保护外，IPSec也可自己单独作为隧道协议来提供隧道的建立。如果IPSec自己单独作为隧道协议来使用，那么IPsec就不需要任何其它隧道协议就能独立实现VPN功能。这两种使用方式由管理员的配置来决定。需要注意的是，IPSec目前只支持ipv4单播。</p><p>IPSec通过定义一些方法来保护特定的IP数据报，这些流量如何被保护，还有流量发给谁。</p><h3 id="安全联盟"><a href="#安全联盟" class="headerlink" title="安全联盟"></a>安全联盟</h3><p>IPSec在两个端点之间提供安全通信，端点被称为IPSec对等体。<br>IPSec中通信双方建立的连接叫做安全联盟(security association)，顾名思义，通信双方结成盟友，使用相同的协议(AH、ESP还是两者结合)、封装模式(传输模式还是隧道模式)、加密算法(DES、3DES、AES)、加密密钥、验证算法、验证密钥、密钥周期。SA是IPSec的基础，也是IPSec的<em>本质</em>. SA并不是隧道，形象的说是一份合约，协商双方共同遵守的合约。</p><p>建立SA的方式有两种，手工配置和IKE自动协商。</p><p>安全联盟是单向的逻辑连接，在两个对等体之间的双向通信，最少需要两个SA来分别对两个方向的数据流进行安全保护。同时，如果两个对等体希望同时使用AH和ESP来进行安全通信，则每个对等体都会针对每一种协议来构建一个独立的SA。如下图所示：<br><img src="https://rancho333.github.io/pictures/ipsec_security.png"></p><p>SA由一个三元组来唯一标识，这个三元组包括SPI(security parameter index, 安全参数索引)、目的IP地址、安全协议号(AH或ESP)。</p><p>SPI是用于唯一标识SA的一个32比特数值，他在AH和ESP头中传输。在手工配置SA时，需要手工指定SPI的取值。使用IKE协商产生SA时，SPI将随机生成。</p><p>通过IKE协商建立的SA具有生存周期，手工方式建立的SA永不老化。IKE协商建立的SA的生存周期有两种定义方式：</p><ul><li>基于时间的生存周期，定义了一个SA从建立到失效的时间</li><li>基于流量的生存周期，定义了一个SA允许处理的最大流量</li></ul><p>生存周期到达指定的时间或指定的流量，SA就会失效。SA失效前，IKE将为IPSec协商建立新的SA，这样，在旧的SA失效前新的SA就已经准备好了。</p><p>建立安全联盟最直接的方式就是分别在两端认为设定好封装模式、加密算法、加密密钥、验证算法、验证密钥。</p><h3 id="IPSec虚拟隧道接口"><a href="#IPSec虚拟隧道接口" class="headerlink" title="IPSec虚拟隧道接口"></a>IPSec虚拟隧道接口</h3><p>IPSec虚拟隧道接口是一种支持路由的三层逻辑接口，它可以支持动态路由协议，所有路由到IPSec虚拟隧道接口的报文都将进行IPSec保护，同时还可以支持对组播流量的保护，和实现GRE的tunnel接口类似。使用虚拟隧道接口有以下优点：</p><ul><li>简化配置：通过路由来确定那些数据流进行IPSec保护。</li><li>减少开销：在保护远程接入用户流量的组网应用中，在IPSec虚拟隧道接口处进行报文封装，与IPSec over GRE或者IPSec over L2TP方式的隧道封装相比，无需额外为入隧道流量加封装GRE或者L2TP头，减少了报文封装层次，节省了带宽。</li><li>业务应用更加灵活：IPsec虚拟隧道接口在实施过程中明确地区分出“加密前”和“加密后”两个阶段，用户可以根据不同的组网需求灵活选择其它业务（例如NAT、QoS）实施的阶段。例如，如果用户希望对IPsec封装前的报文应用QoS，则可以在IPsec虚拟隧道接口上应用QoS策略；如果希望对IPsec封装后的报文应用QoS，则可以在物理接口上应用QoS策略。</li></ul><p>使用IPSec虚拟隧道口封装解封装报文如图所示：<br><img src="https://rancho333.github.io/pictures/ipsec_enca.png"></p><h3 id="IKE"><a href="#IKE" class="headerlink" title="IKE"></a>IKE</h3><p>在实施IPSec的过程中，可以使用IKE(internet key exchange)协议来建立SA<br>IKE是个混个协议，其中包含部分Oakley协议，内置在ISAKMP(internet security association and key management protocol)协议中的部分SKEME协议，所以IKE也可以写为ISAKMP/Oakley，它是针对密钥安全，用来保证密钥的安全传输、交换以及存储，主要是对密钥进行操作，并不对用户的实际数据进行操作。</p><p>IKE不是在网络上直接传输密钥，而是通过一系列数据的交换，最终计算出双方共享的密钥，并且即使第三者截获了双方用于计算密钥的所有交换数据，也不足以计算出真正的密钥。</p><p>IKE具有一套自保护机制，可以在不安全的网络上安全的认证身份、分发密钥、建立IPSec SA。</p><p>数据认证有如下两方面概念：</p><ul><li>身份认证：身份认证确认通信双方的身份。支持两种认证方法：预共享密钥(pre-shared-key)认证基于PKI的数字签名(rsa-signature)认证。</li><li>身份保护：身份数据在密钥产生之后加密传送，实现了对身份数据的保护。</li></ul><p>DH(Diffie-Hellman，交换及密钥分发)算法是一种公共密钥算法。通信双方在不传输密钥的情况下通过交换一些数据，计算出共享的密钥。即使第三者截获了双方用于计算密钥的所有交换数据，由于其复杂度很高，不足以计算出真正的密钥。所以，DH交换技术可以保证双方能够安全地获得公有信息。</p><p>PFS(perfect forward secrecy，完善的前向安全性)特性是一种安全特性，指一个密钥被破解，并不影响其它密钥的安全性，因为这些密钥之间没有派生关系。对于IPSec，是通过在IKE阶段2协商中增加一次密钥交换来实现的。PFS特性时DH算法保障的。</p><p>IKE的交换过程：<br>通过IKE方式建立的SA实际有两组，分别为IKE SA和IPSec SA, 两个SA分别定义了如何保护密钥及如何保护数据，其实这两个SA都是IKE建立起来的，所以IKE的整个运行过程拆分成两个phase。</p><ul><li><p>phase one：通信各方彼此间建立一个已通过身份认证和安全保护的通道，即建立一个ISAKMP SA。第一阶段有主模式(main mode)和野蛮模式(aggressive mode)两种IKE交换方式。协商的安全策略包括：</p><ul><li>认证方式(authentication)：pre-shard keys, public key infrastructure，RSA encrypted nonce，默认是PKI</li><li>加密算法：加密数据</li><li>Hash算法(HMAC)：生成摘要，完整性认证</li><li>密钥算法：计算密钥的方式</li><li>lifetime</li><li>NAT穿越(NAT traversal): 默认开启，无须手工配置</li></ul></li><li><p>phase two：用在第一阶段建立的安全隧道为IPSec协商安全服务，即为IPSec协商具体的SA，建立最终的IP数据安全传输的IPSec SA。同样需要协商出一套安全策略，包括：</p><ul><li>加密算法</li><li>hash算法(HMAC)</li><li>lifetime</li><li>IPSec mode：tunnel mode和transport mode，默认是tunnel mode和transport</li></ul></li></ul><p>从上可看出IPSec SA中没有协商认证方式和密钥算法，因为IKE SA中已经认证过了，所以后面不需要再认证，并且密钥是在IKE SA已经完成的。</p><p>IPSec与IKE的关系如下：<br><img src="https://rancho333.github.io/pictures/ipsec_ike.png"></p><ul><li>IKE是UDP之上的一个应用层协议，是IPSec的信令协议</li><li>IKE为IPSec协商建立SA，并把建立的参数及生成的密钥交给IPSec</li><li>IPSec使用IKE建立的SA对IP报文加密或认证处理</li></ul><h1 id="IPSec实验"><a href="#IPSec实验" class="headerlink" title="IPSec实验"></a>IPSec实验</h1><h2 id="IOS中关于IPSec的一些配置概念"><a href="#IOS中关于IPSec的一些配置概念" class="headerlink" title="IOS中关于IPSec的一些配置概念"></a>IOS中关于IPSec的一些配置概念</h2><ul><li><p>transform set<br>transform set是一组算法集合，通过它来定义使用怎样的算法来封装数据包，比如之前所说的ESP封装，AH封装都需要通过transform set来定义，还可以定义其它一些加密算法以及HMAC算法。通过transform set，就可以让用户来选择保护数据的强度，因此transform set就是定义数据包是受到怎样的保护。也就是ipsec的加密、完整性算法，以及ipsec的模式。</p></li><li><p>crypto isakmp<br>  定义IKE SA的协商参数</p></li><li><p>crypto map<br>Crypto map是思科的IOS中配置IPSec的组件，执行两个主要功能：</p><ul><li>选择需要加密处理的数据（通过ACL匹配）</li><li>定义数据加密的策略以及数据发往的对端<br>crypto map将之前定义好的transform set和isakmp绑定起来，形成完整的ipsec配置，应用到接口就完成配置了。</li></ul></li></ul><p>crypto map中的策略是分组存放的，以序号区分，如果一个crypto map有多个策略组，则最低号码的组有限。当配置完crypto map后，需要应用到接口上才能生效，并且一个接口只能应用一个crypto map.</p><p>crypto map还分为静态map和动态map，简单区分，就是数据发往的对端是否固定，如果是动态map，那么对端是不固定的，在存在隧道时，也就表示隧道的终点时不固定的，但源始终是自己。</p><h2 id="eveng仿真实验"><a href="#eveng仿真实验" class="headerlink" title="eveng仿真实验"></a>eveng仿真实验</h2><p>IPSec vpn配置时，有如下几个重要步骤：</p><ul><li>配置IKE(ISAKMP)策略</li><li>定义认证标识</li><li>配置IPSec transform</li><li>定义感兴趣流量</li><li>创建crypto map</li><li>将crypto map应用于接口</li></ul><p>实验拓扑如图所示(lan-to-lan vpn)：<br><img src="https://rancho333.github.io/pictures/ipsec_topology.png"></p><p>拓扑说明如下：<br>vpc4和vpc5分别属于两个私网，网关分别指向R1和R3, R2仿真internet, R2上不配置任何路由，只负责和R1、R3之间直连链路的通信。R1和R3上配置默认路由指向R2。因为R2上没有VPC4、VPC5网段的路由，所以两者之间不通。</p><p>基础网络环境配置如下(ip和默认路由)：</p><div class="tabs" id="tab"><ul class="nav-tabs"><li class="tab active"><a href="#tab-1">VPC4</a></li><li class="tab"><a href="#tab-2">R1</a></li><li class="tab"><a href="#tab-3">R2</a></li><li class="tab"><a href="#tab-4">R3</a></li><li class="tab"><a href="#tab-5">VPC5</a></li></ul><div class="tab-content"><div class="tab-pane active" id="tab-1"><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">VPC4&gt; show</span><br><span class="line"></span><br><span class="line">NAME   IP&#x2F;MASK              GATEWAY                             GATEWAY</span><br><span class="line">VPC4   14.1.1.4&#x2F;24          14.1.1.1</span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="tab-2"><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">interface Ethernet0&#x2F;0</span><br><span class="line"> ip address 12.1.1.1 255.255.255.0</span><br><span class="line">!</span><br><span class="line">interface Ethernet0&#x2F;1</span><br><span class="line"> ip address 14.1.1.1 255.255.255.0</span><br><span class="line">!</span><br><span class="line">ip route 0.0.0.0 0.0.0.0 12.1.1.2       &#x2F;&#x2F; 默认路由指向internet</span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="tab-3"><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">interface Ethernet0&#x2F;0</span><br><span class="line"> ip address 12.1.1.2 255.255.255.0</span><br><span class="line">!</span><br><span class="line">interface Ethernet0&#x2F;1</span><br><span class="line"> ip address 23.1.1.2 255.255.255.0</span><br><span class="line">!</span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="tab-4"><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">interface Ethernet0&#x2F;0</span><br><span class="line"> ip address 23.1.1.3 255.255.255.0</span><br><span class="line">!</span><br><span class="line">interface Ethernet0&#x2F;1</span><br><span class="line"> ip address 35.1.1.3 255.255.255.0</span><br><span class="line">!</span><br><span class="line">ip route 0.0.0.0 0.0.0.0 23.1.1.2       &#x2F;&#x2F; 默认路由指向internet</span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="tab-5"><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">VPC5&gt; show</span><br><span class="line"></span><br><span class="line">NAME   IP&#x2F;MASK              GATEWAY                             GATEWAY</span><br><span class="line">VPC5   35.1.1.5&#x2F;24          35.1.1.3</span><br></pre></td></tr></table></figure></div></div></div><p>检测网络的连通性：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">VPC5&gt; ping 35.1.1.3 -c 1</span><br><span class="line"></span><br><span class="line">84 bytes from 35.1.1.3 icmp_seq&#x3D;1 ttl&#x3D;255 time&#x3D;0.356 ms</span><br><span class="line"></span><br><span class="line">VPC5&gt; ping 23.1.1.2 -c 1</span><br><span class="line"></span><br><span class="line">23.1.1.2 icmp_seq&#x3D;1 timeout         &#x2F;&#x2F; R2上没有VPC5的回程路由，所以不通</span><br></pre></td></tr></table></figure><p>接下来配置IPSec vpn：</p><div class="tabs" id="tab"><ul class="nav-tabs"><li class="tab active"><a href="#tab-1">R1</a></li><li class="tab"><a href="#tab-2">R3</a></li></ul><div class="tab-content"><div class="tab-pane active" id="tab-1"><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 配置IKE SA策略</span><br><span class="line">crypto isakmp policy 1            &#x2F;&#x2F; 策略优先级</span><br><span class="line"> encr 3des                         &#x2F;&#x2F; 加密方式</span><br><span class="line"> hash md5                           &#x2F;&#x2F; 报文摘要算法，报文完整性验证</span><br><span class="line"> authentication pre-share           &#x2F;&#x2F; 认证方式</span><br><span class="line"> group 2                            &#x2F;&#x2F; 密钥算法</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 定义认证标识</span><br><span class="line">crypto isakmp key 0 rancho address 23.1.1.3       &#x2F;&#x2F; 因为认证方式为pre-share, 所以需要定义认证密码，此处密码为&#96;rancho&#96;， 对端地址为23.1.1.3，双方密码必须一致。0表示密码在show run中明文显示</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;  定义 ipsec transform</span><br><span class="line">crypto ipsec transform-set rancho esp-3des esp-sha-hmac     &#x2F;&#x2F; transform组名字为&#96;rancho&#96;，只采用esp协议加密认证，加密方式为3des，校验方式为sha-hmac</span><br><span class="line"> mode tunnel            &#x2F;&#x2F; IPSec默认模式就是tunnel，不需要配置</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 定义感兴趣的数据流</span><br><span class="line">access-list 100 permit ip 14.1.1.0 0.0.0.255 35.1.1.0 0.0.0.255     &#x2F;&#x2F; 两端的私网网段</span><br><span class="line"></span><br><span class="line"> &#x2F;&#x2F; 定义crypto map</span><br><span class="line">crypto map rancho 1 ipsec-isakmp    &#x2F;&#x2F; map名字叫&#96;rancho&#96;，序号为1，可以有多个，越小越优</span><br><span class="line"> set peer 23.1.1.3                  &#x2F;&#x2F; 隧道对端为23.1.1.3</span><br><span class="line"> set transform-set rancho           &#x2F;&#x2F; 调用名为rancho的transform 组</span><br><span class="line"> match address 100                  &#x2F;&#x2F; 指定ACL 100为保护的流量</span><br><span class="line"> </span><br><span class="line"> &#x2F;&#x2F; 将crypto应用在接口上</span><br><span class="line">interface Ethernet0&#x2F;0</span><br><span class="line"> crypto map rancho                  &#x2F;&#x2F; 在eth0&#x2F;0上应用名为rancho的crypto map</span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="tab-2"><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">crypto isakmp policy 1</span><br><span class="line"> encr 3des</span><br><span class="line"> hash md5</span><br><span class="line"> authentication pre-share</span><br><span class="line"> group 2</span><br><span class="line">crypto isakmp key rancho address 12.1.1.1       </span><br><span class="line">!</span><br><span class="line">crypto ipsec transform-set rancho esp-3des esp-sha-hmac </span><br><span class="line"> mode tunnel</span><br><span class="line">!</span><br><span class="line">crypto map rancho 1 ipsec-isakmp </span><br><span class="line"> set peer 12.1.1.1</span><br><span class="line"> set transform-set rancho </span><br><span class="line"> match address 100</span><br><span class="line">!</span><br><span class="line">interface Ethernet0&#x2F;0</span><br><span class="line"> crypto map rancho</span><br><span class="line">!</span><br><span class="line">access-list 100 permit ip 35.1.1.0 0.0.0.255 14.1.1.0 0.0.0.255</span><br></pre></td></tr></table></figure></div></div></div><p>至此，IPSec隧道两端的配置就完成了。但是IKE SA并没有建立：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">R1#show crypto isakmp peers </span><br><span class="line">R1#show crypto isakmp sa    </span><br><span class="line">IPv4 Crypto ISAKMP SA</span><br><span class="line">dst             src             state          conn-id status</span><br><span class="line"></span><br><span class="line">IPv6 Crypto ISAKMP SA</span><br><span class="line"></span><br><span class="line">R1#</span><br></pre></td></tr></table></figure><p>需要业务流量来触发IKE SA的建立：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">VPC4&gt; ping 35.1.1.5</span><br><span class="line">35.1.1.5 icmp_seq&#x3D;1 timeout</span><br><span class="line">84 bytes from 35.1.1.5 icmp_seq&#x3D;2 ttl&#x3D;62 time&#x3D;2.828 ms</span><br></pre></td></tr></table></figure><p>在R2的eth0上抓包：<br><img src="https://rancho333.github.io/pictures/ipsec_esp_packet.png"></p><p>可以看到先通过IKE建立SA，之后的ICMP报文封装在ESP报文中，在隧道两端传递。</p><p>最后查看一下配置和状态：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 查看isakmp policy策略</span><br><span class="line">R1#show crypto isakmp policy </span><br><span class="line"></span><br><span class="line">Global IKE policy</span><br><span class="line">Protection suite of priority 1</span><br><span class="line">encryption algorithm:Three key triple DES</span><br><span class="line">hash algorithm:Message Digest 5</span><br><span class="line">authentication method:Pre-Shared Key</span><br><span class="line">Diffie-Hellman group:#2 (1024 bit)</span><br><span class="line">lifetime:86400 seconds, no volume limit</span><br><span class="line"></span><br><span class="line">R1#show crypto isakmp key           &#x2F;&#x2F; 查看phase one认证密码</span><br><span class="line">R1#show crypto isakmp sa            &#x2F;&#x2F; 查看IKE SA</span><br><span class="line">R1#show crypto isakmp peers         &#x2F;&#x2F; 查看IKE peers</span><br><span class="line">R1#show crypto ipsec transform-set      &#x2F;&#x2F; 查看IPSec transform</span><br><span class="line">R1#show crypto ipsec sa                 &#x2F;&#x2F; 查看IPSec SA</span><br><span class="line">R1#show crypto map                  &#x2F;&#x2F; 查看crypto map</span><br></pre></td></tr></table></figure><h1 id="关于IPSec使用的一些思考"><a href="#关于IPSec使用的一些思考" class="headerlink" title="关于IPSec使用的一些思考"></a>关于IPSec使用的一些思考</h1><p>IPsec具有以下优点：</p><ul><li>支持IKE，可实现密钥的自动协商功能，减少密钥协商的开销。可以通过IKE建立和维护SA的服务，简化了IPsec的使用和管理</li><li>所有使用IP协议进行数据传输的应用系统和服务都可以使用IPsec，而不必对这些应用系统和服务本身做任何修改</li></ul><p>IPsec具有以下缺点：</p><ul><li>安全服务协议AH和ESP所提供的功能重叠率非常高，虽然IPsec最新版本规定AH为可选协议，但并没有解决IPsec组合复杂度的问题。从而导致IPsec的工程实现以及部署维护的成本依旧非常高。</li><li>安全服务协议的工作模式众多：传输模式、隧道模式，在加上两种协议的组合，导致IPsec的复杂度高。</li></ul><p>协议包含有太多的选项和太多的灵活性，做同样或类似的事有几种方式，从而引入的复杂度会导致工程实现的系统非常复杂，存在的安全漏洞也就非常多，安全评估也就非常困难，从某种意义上讲，复杂是安全最大的敌人。</p><p>  从工作模式的角度上看，IPsec的工作模式分为传输模式和隧道模式，而这两种工作模式结合AH与ESP以及AH和ESP的组合，又会衍生出更多的工作模式，导致IPsec在工程实现、维护上大大加重了其复杂度。</p><p>  对于IPsec的使用场景与传输模式：</p><ul><li>传输模式适用于主机间应用场景(如果在网关上使用，那么网关视作主机，此时用于网络管理)</li><li>隧道模式使用与带有网关的应用场景</li></ul><p>  传输模式是为高级协议(IP的payload)提供保护而设计的，隧道模式是为整个IP分组提供保护设计的。</p><p>  可以淘汰传输模式。</p>]]></content:encoded>
      
      
      
      <category domain="https://rancho333.github.io/tags/vpn/">vpn</category>
      
      
      <comments>https://rancho333.github.io/2022/08/01/IPSec%E7%AE%80%E8%BF%B0/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>GRE简述</title>
      <link>https://rancho333.github.io/2022/07/29/GRE%E7%AE%80%E8%BF%B0/</link>
      <guid>https://rancho333.github.io/2022/07/29/GRE%E7%AE%80%E8%BF%B0/</guid>
      <pubDate>Fri, 29 Jul 2022 02:12:43 GMT</pubDate>
      
      <description>&lt;h1 id=&quot;写在前面&quot;&gt;&lt;a href=&quot;#写在前面&quot; class=&quot;headerlink&quot; title=&quot;写在前面&quot;&gt;&lt;/a&gt;写在前面&lt;/h1&gt;&lt;p&gt;承接上文&lt;a href=&quot;https://rancho333.github.io/2022/07/28/vpn%E6%8A%80%E6%9C%AF%E7%AE%80%E8%BF%B0/&quot;&gt;vpn技术简述&lt;/a&gt;，本文探讨下GRE(general routing encapsulation),通用路由封装技术， GRE是VPN的一种简单实现。&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<h1 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h1><p>承接上文<a href="https://rancho333.github.io/2022/07/28/vpn%E6%8A%80%E6%9C%AF%E7%AE%80%E8%BF%B0/">vpn技术简述</a>，本文探讨下GRE(general routing encapsulation),通用路由封装技术， GRE是VPN的一种简单实现。</p><span id="more"></span><h1 id="GRE介绍"><a href="#GRE介绍" class="headerlink" title="GRE介绍"></a>GRE介绍</h1><p>在探讨一种网络技术之前，必然需要了解该技术的应用背景，解决什么问题。internet虽然统一了今天的网络世界，但是私有网络，异构网络依然存在，他们有着通过internet互联的需求，这就是GRE需要解决的问题。</p><ul><li>私有网络无法通过internet互通</li><li>异构网络(IPX、AppleTalk)之间无法通过internet进行通信</li><li>私网之间部署的动态路由无法跨越internet<br>好比送快递，比如某快递公司只有北京上海的分部，没有两地之间互通的能力，这时把需要互通的包裹给顺丰，顺丰就是internet, 某快递就是私有网络或异构网络。</li></ul><p>GRE可以把某种网络的报文封装在以太网上进行传输，1994年GRE问世，RFC编号是RFC1701和RFC1702.</p><p>任何一种封装技术，其基本构成要素都可以分成三个部分：乘客协议、封装协议、传输协议。GRE中乘客协议可以是ip/ipx, 封装协议自然就是GRE自身，传输协议是ip。</p><p>gre的封装过程可以分成两步，第一步是在乘客协议之前加上gre报文头，第二步是在第一步的基础上添加新的ip报文头。</p><p>在产品实现的角度，上述的封装过程是通过一个逻辑接口来实现的，这个逻辑接口是tunnel接口，在下文的实验中会讲到。封装的基本过程如下图所示：<br><img src="https://rancho333.github.io/pictures/gre_encapsulation.png"></p><ul><li>私网流量到达路由器入接口，路由器查询路由表对此流量进行转发</li><li>路由器根据路由查找结果，将此流量引导到tunnel接口进行gre封装</li><li>封装后的gre报文再次查找路由表进行流量转发</li><li>路由器根据路由查找结果，找到出接口，将流量转发到internet</li></ul><p>对于解封装，需要注意的是，当gre报文到达隧道终点时，tunnel通过判断运输协议(IP报文)的protocol字段是否为47来判定报文是不是gre报文，如果是，解封装，然后转发或路由。</p><h2 id="GRE报文说明"><a href="#GRE报文说明" class="headerlink" title="GRE报文说明"></a>GRE报文说明</h2><p>gre报文如图所示。<br><img src="https://rancho333.github.io/pictures/gre_packet.png"></p><p>GRE的报文很简单，注意其中<code>recursion</code>字段，该字段表示GRE封装的层数，完成一次GRE封装加1,如果大于3则丢弃报文，这是为了防止对GRE报文的无限封装。</p><h1 id="GRE实验"><a href="#GRE实验" class="headerlink" title="GRE实验"></a>GRE实验</h1><p>实验拓扑如下：<br><img src="https://rancho333.github.io/pictures/gre_topology.png"></p><p>R1和R3上分别创建loopback接口，它们之间通过gre进行通信。隧道的逻辑端口分别是R1和R2上创建的<code>tunnel 0</code>, 对于需要通过GRE进行封装的报文，需要保证目的ip的下一跳是<code>tunnel 0</code>；隧道物理端口分别是R1和R2的eth0接口，需要保证两者之间路由可达。具体配置如下：</p><div class="tabs" id="tab"><ul class="nav-tabs"><li class="tab active"><a href="#tab-1">R1</a></li><li class="tab"><a href="#tab-2">R2</a></li><li class="tab"><a href="#tab-3">R3</a></li></ul><div class="tab-content"><div class="tab-pane active" id="tab-1"><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">interface Loopback0</span><br><span class="line"> ip address 1.1.1.1 255.255.255.0           &#x2F;&#x2F; 创建lp0接口</span><br><span class="line">!</span><br><span class="line">interface Tunnel0                              &#x2F;&#x2F; 创建tunnel逻辑端口</span><br><span class="line"> ip address 13.1.1.1 255.255.255.0              &#x2F;&#x2F; 配置tunnel ip地址</span><br><span class="line"> tunnel source Ethernet0&#x2F;0                      &#x2F;&#x2F; 配置tunnel源</span><br><span class="line"> tunnel destination 23.1.1.3                    &#x2F;&#x2F; 配置tunnel目的</span><br><span class="line">!</span><br><span class="line">interface Ethernet0&#x2F;0</span><br><span class="line"> ip address 12.1.1.1 255.255.255.0</span><br><span class="line">!</span><br><span class="line">ip route 3.3.3.3 255.255.255.255 Tunnel0        &#x2F;&#x2F; 静态路由，乘客报文与逻辑隧道之间路由可达</span><br><span class="line">ip route 23.1.1.0 255.255.255.0 12.1.1.2        &#x2F;&#x2F; 静态路由，隧道物理端口之间路由可达</span><br><span class="line">!</span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="tab-2"><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">interface Ethernet0&#x2F;0</span><br><span class="line"> ip address 12.1.1.2 255.255.255.0</span><br><span class="line">!</span><br><span class="line">interface Ethernet0&#x2F;1</span><br><span class="line"> ip address 23.1.1.2 255.255.255.0</span><br><span class="line">!</span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="tab-3"><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">interface Loopback0                             &#x2F;&#x2F; 说明如R1</span><br><span class="line"> ip address 3.3.3.3 255.255.255.255</span><br><span class="line">!</span><br><span class="line">interface Tunnel0</span><br><span class="line"> ip address 13.1.1.3 255.255.255.0</span><br><span class="line"> tunnel source Ethernet0&#x2F;0</span><br><span class="line"> tunnel destination 12.1.1.1</span><br><span class="line">!</span><br><span class="line">interface Ethernet0&#x2F;0</span><br><span class="line"> ip address 23.1.1.3 255.255.255.0</span><br><span class="line">!</span><br><span class="line">ip route 1.1.1.1 255.255.255.255 Tunnel0</span><br><span class="line">ip route 12.1.1.0 255.255.255.0 23.1.1.2</span><br></pre></td></tr></table></figure></div></div></div><p>配置的关键在于将需要进入隧道的流量引导到隧道逻辑端口<code>tunnel 0</code>(路由下一跳是tunnel), 然后保证隧道物理端口之间的路由可达。对于<code>tunnel 0</code>的路由，使用ospf来代替则是：</p><div class="tabs" id="tab"><ul class="nav-tabs"><li class="tab active"><a href="#tab-1">R1</a></li><li class="tab"><a href="#tab-2">R3</a></li></ul><div class="tab-content"><div class="tab-pane active" id="tab-1"><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">router ospf 110</span><br><span class="line"> network 1.1.1.1 0.0.0.0 area 0         &#x2F;&#x2F; 将需要gre封装的流量加入ospf计算</span><br><span class="line"> network 13.1.1.0 0.0.0.255 area 0      &#x2F;&#x2F; 将tunnel 0将入ospf计算</span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="tab-2"><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">router ospf 110</span><br><span class="line"> network 3.3.3.3 0.0.0.0 area 0</span><br><span class="line"> network 13.1.1.0 0.0.0.255 area 0</span><br></pre></td></tr></table></figure></div></div></div><p>注意此时tunnel两端需要配置成一个网段。查看一下ospf的邻居状态及路由表：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">R3#show ip ospf neighbor </span><br><span class="line"></span><br><span class="line">Neighbor ID     Pri   State           Dead Time   Address         Interface</span><br><span class="line">1.1.1.1           0   FULL&#x2F;  -        00:00:35    13.1.1.1        Tunnel0</span><br><span class="line"></span><br><span class="line">R3#show ip route ospf | begin 1.1.1.1</span><br><span class="line">O        1.1.1.1 [110&#x2F;1001] via 13.1.1.1, 00:03:32, Tunnel0</span><br></pre></td></tr></table></figure><p>对于ospf报文的gre封装：<br><img src="https://rancho333.github.io/pictures/gre_ospf.png"></p><p>可以看到传输协议的源目地址就是隧道物理端口的地址，ospf hello报文的源地址是隧道逻辑端口tunnel的地址。</p><p>测试两个loopback接口之间的连通性：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">R3#ping 1.1.1.1 source 3.3.3.3</span><br><span class="line">Type escape sequence to abort.</span><br><span class="line">Sending 5, 100-byte ICMP Echos to 1.1.1.1, timeout is 2 seconds:</span><br><span class="line">Packet sent with a source address of 3.3.3.3 </span><br><span class="line">!!!!!</span><br><span class="line">Success rate is 100 percent (5&#x2F;5), round-trip min&#x2F;avg&#x2F;max &#x3D; 1&#x2F;1&#x2F;1 ms</span><br></pre></td></tr></table></figure><p>对于icmp报文的gre封装：<br><img src="https://rancho333.github.io/pictures/gre_ping.png"></p><h2 id="gre实验的几个问题"><a href="#gre实验的几个问题" class="headerlink" title="gre实验的几个问题"></a>gre实验的几个问题</h2><p>cisco的tunnel默认封装类型就是gre，不用特殊指定。华为tunnel的封装类型需要指定。</p><p>tunnel接口的IP地址是否必须要配置？隧道两端的tunnel接口ip地址是否有所关联？tunnel接口使用的公网ip还是私网ip?</p><p>tunnel接口是一个三层接口，需要路由，所以必须配置ip地址，否则不能up. 从上面的抓包来看，只有使用ospf协议时，tunnel的ip才会体现到乘客协议中，走静态路由时则没有任何存在感，考虑到将tunnel看成一个虚拟的直连链接，建议tunnel两端配置成同一网段(否则ospf时邻居无法建立)；tunnel的ip不会出现在传输协议中，所以设置成私网ip即可。</p><p>tunnel是一个无状态的隧道，怎么感知对方的状态呢？否则会造成数据黑洞的问题。可以在tunnel接口下开启<code>keepalive</code>功能，tunnel会发送一个保活报文给对端，解封装后再路由回来，这样就可以检测链路以及对端设备是否正常。保活报文抓包如下：<br><img src="https://rancho333.github.io/pictures/gre_keepalive.png"></p><p>可以看到传输协议与乘客协议的报文源目地址刚好是相反的，即R3的eth0发出的keepalive，R1的eth0收到之后解封装再路由，又会重新发送给R3的eth0。假设R1上的tunnel down(或者ip没配)，那么就无法完成解封装。</p><p>最后一个问题是安全性的问题。我们在抓包过程中可以直接看到乘客协议的报文内容，比如我们知道乘客协议是icmp还是ospf等，这是不安全。GRE over IPSec可以解决这个问题。后面会接续研究。</p><p>参考资料：<br><a href="https://forum.huawei.com/enterprise/zh/thread-256801.html">强叔侃墙 VPN篇 GRE</a></p>]]></content:encoded>
      
      
      
      <category domain="https://rancho333.github.io/tags/vpn/">vpn</category>
      
      
      <comments>https://rancho333.github.io/2022/07/29/GRE%E7%AE%80%E8%BF%B0/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>vpn技术简述</title>
      <link>https://rancho333.github.io/2022/07/28/vpn%E6%8A%80%E6%9C%AF%E7%AE%80%E8%BF%B0/</link>
      <guid>https://rancho333.github.io/2022/07/28/vpn%E6%8A%80%E6%9C%AF%E7%AE%80%E8%BF%B0/</guid>
      <pubDate>Thu, 28 Jul 2022 08:11:52 GMT</pubDate>
      
      <description>&lt;h1 id=&quot;写在前面&quot;&gt;&lt;a href=&quot;#写在前面&quot; class=&quot;headerlink&quot; title=&quot;写在前面&quot;&gt;&lt;/a&gt;写在前面&lt;/h1&gt;&lt;p&gt;无论是访问外网资源(google，youtube等)，还是居家办公访问公司内网，我们都需要使用到vpn这个东东。VPN(virtual private network)是指在公用网络上建立一个私有的、专用的虚拟通信网络。本质就是建立隧道传递原有的业务流量，在隧道两端进行业务流量的封装与解封装，隧道两端则是需要互通的两个子网。&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<h1 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h1><p>无论是访问外网资源(google，youtube等)，还是居家办公访问公司内网，我们都需要使用到vpn这个东东。VPN(virtual private network)是指在公用网络上建立一个私有的、专用的虚拟通信网络。本质就是建立隧道传递原有的业务流量，在隧道两端进行业务流量的封装与解封装，隧道两端则是需要互通的两个子网。</p><span id="more"></span><h1 id="vpn技术的一些分类"><a href="#vpn技术的一些分类" class="headerlink" title="vpn技术的一些分类"></a>vpn技术的一些分类</h1><p>有几种角度的分类方式，其一是根据建设单位(运营商还是企业自身)来分类：</p><ul><li>租用运营商VPN专线搭建企业VPN网络：主要是MPLS VPN, 相较于传统的专线(E1、SDH专线)更便宜</li><li>用户企业自建VPN网络：基于internet建立企业vpn网络，具体技术包括GRE、L2TP、IPSec、SSLVPN等。</li></ul><p>根据组网方式的不同：<br>本质就是隧道端点位置的不同。记住两个点：加密点/隧道点 和 通信点</p><ul><li>远程访问VPn（access VPN）：适合居家办公场景，一般在PC上安装客户端即可，隧道端点位于PC上，也叫做remote access VPN。加密点/隧道点和通信点都在PC或手机等设备上。</li><li>局域网到局域网的vpn(也称网关到网关的vpn)：适用于异地机构的互联，隧道端点位于网络设备上，也叫做site-to-site VPN，这里有两种分类。加密点/隧道点和通信点在网关、防火墙等专门网络设备上。<ul><li>一种叫intranet-based site-to-site, 即两端的局域网都属于一家公司，把几个私网连接在一起</li><li>一种叫extranet-based site-to-site, 即两端的局域网不属于一家公司，只分享一些固定的资源，而其它资源保持私有</li></ul></li></ul><p>按照vpn技术实现的网络层次进行分类：</p><ul><li>基于数据链路层的VPN：L2TP、L2F、PPTP。其中L2F和PPTP已经基本上被L2TP替代了</li><li>基于网络层的VPN：IPSec、GRE</li><li>基于应用层的VPN：SSL VPN</li></ul><p>基于internet的VPN技术有一个共同的特点就是必须解决网络安全的问题。</p><h1 id="VPN关键技术点"><a href="#VPN关键技术点" class="headerlink" title="VPN关键技术点"></a>VPN关键技术点</h1><h2 id="隧道技术"><a href="#隧道技术" class="headerlink" title="隧道技术"></a>隧道技术</h2><p>隧道技术是VPN的基本技术，类似于点到点的连接技术。它的基本过程就是在数据进入源VPN网关后，将数据封装后通过internet传输到目的vpn网关后再对数据进行解封装。可初略认为vpn网关之间是直连的，是一条隧道，封装的报文不关心具体传输路径。封装后的报文src ip是源vpn网关，dest ip是目的vpn网关。</p><h2 id="认证"><a href="#认证" class="headerlink" title="认证"></a>认证</h2><p>移动办公等场景下，需要对用户的身份进行验证。</p><ul><li>GRE不支持认证</li><li>L2TP依赖于PPP提供的认证技术。</li><li>IPSec：通过IKEv2拨号时，支持进行EAP认证。接入用户的用户名和密码可以本地认证，也可以通过RADIUS服务器认证。认证通过后再给用户分配内部的IP地址，通过此IP地址对用户进行授权和管理。另外IPSec还支持数据源认证</li><li>SSL VPN: 支持本地认证，证书认证和服务器认证。主要是对服务器进行身份认证，确认web网页的合法性。</li></ul><h2 id="加密技术"><a href="#加密技术" class="headerlink" title="加密技术"></a>加密技术</h2><p>internet上传输的报文如果不做加密处理，都是处于裸奔状态，比如我们通过wireshark抓包就可以直接读取到报文内容。加密对象有数据报文和协议报文之分，能够实现协议报文和数据报文都加密的协议安全系数更高。</p><ul><li>GRE和L2TP本身不提供加密技术，所以通常结合IPSec协议一起使用，而IPSec只支持单播封装，很好互补</li><li>IPSec：支持数据报文和协议报文加密。IPSec一般采用对称密钥算法加密数据。</li><li>SSL VPN: 支持数据报文和协议报文加密。SSL VPN采用非对称密钥算法加密数据(公钥加密，私钥解密)。</li></ul><h2 id="数据验证技术"><a href="#数据验证技术" class="headerlink" title="数据验证技术"></a>数据验证技术</h2><p>数据验证就是对收到的报文进行验货。比如常用MD5验证文件的完整性。在收发两端都对报文进行验证，只有摘要一致的报文才被认可。</p><ul><li>GRE：本身只提供简单的校验和验证及关键字验证。</li><li>L2TP：不提供数据验证技术</li><li>IPSec: 支持对数据进行完整性验证和数据源验证。在IPSec中验证和加密通常一起使用，对加密后的报文HMAC(keyed-hash message authentication code)生成摘要</li><li>SSL VPN：支持对数据进行完整性验证和数据源验证。SSL VPN采用公钥体质，利用Hash算法生成摘要，再用私钥加密摘要生成数字签名，利用公钥进行解密。利用公钥和私钥的一一关系可以对数据源进行认证。</li></ul><p>总结一下这几种vpn技术的应用场景：</p><p>| GRE | L2TP | IPSec | SSL VPN |<br>| :— | :— | :— | :— | :— |<br>| 作用范围 | IP层及以上数据 | IP层及以上数据 | IP层及以上数据 | 应用层特定数据 |<br>| 适用场景 | internet VPN | access vpn | internet vpn; accese | access vpn |<br>| 身份认证 | 不支持 | 支持，基于PPP的chap、pap、eap认证| 支持，采用IP或ID+口令或证书进行数据源认证；IKEv2拨号方式采用EAP认证进行用户身份认证 | 支持，用户名+口令+证书对服务器进行认证，也可进行双向认证 |<br>| 加密技术 | 不支持 | 不支持 | 支持 | 支持 |<br>| 数据验证 | 支持，校验和验证、关键字验证 | 不支持 | 支持 | 支持 |<br>| 如何使用 | GRE over IPSec | L2TP over IPSec | 单独使用 | SSL VPN |</p>]]></content:encoded>
      
      
      
      <category domain="https://rancho333.github.io/tags/vpn/">vpn</category>
      
      
      <comments>https://rancho333.github.io/2022/07/28/vpn%E6%8A%80%E6%9C%AF%E7%AE%80%E8%BF%B0/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>sonic入门实战培训</title>
      <link>https://rancho333.github.io/2022/07/26/sonic%E5%85%A5%E9%97%A8%E5%AE%9E%E6%88%98%E5%9F%B9%E8%AE%AD/</link>
      <guid>https://rancho333.github.io/2022/07/26/sonic%E5%85%A5%E9%97%A8%E5%AE%9E%E6%88%98%E5%9F%B9%E8%AE%AD/</guid>
      <pubDate>Tue, 26 Jul 2022 02:35:28 GMT</pubDate>
      
      <description>&lt;h1 id=&quot;课程背景&quot;&gt;&lt;a href=&quot;#课程背景&quot; class=&quot;headerlink&quot; title=&quot;课程背景&quot;&gt;&lt;/a&gt;课程背景&lt;/h1&gt;&lt;p&gt;Choose open, close the innovation gap.&lt;br&gt;随着互联网产业的蓬勃发展，数据和流量开始聚集在数据中心。在这个大背景下，如何继续提高数据中心规模化效益，以及如何解决超大型云计算中心异构网络的运维、排障及自动化问题，是每个数据中心网络架构师都要面对的挑战。另外一方面，数据中心基础建设增加，客户越来越关注降低数据中心扩展、运维的成本。&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<h1 id="课程背景"><a href="#课程背景" class="headerlink" title="课程背景"></a>课程背景</h1><p>Choose open, close the innovation gap.<br>随着互联网产业的蓬勃发展，数据和流量开始聚集在数据中心。在这个大背景下，如何继续提高数据中心规模化效益，以及如何解决超大型云计算中心异构网络的运维、排障及自动化问题，是每个数据中心网络架构师都要面对的挑战。另外一方面，数据中心基础建设增加，客户越来越关注降低数据中心扩展、运维的成本。</p><span id="more"></span><p>白盒交换机在这个背景下飞速发展，操作系统作为白盒交换机的灵魂，在数据中心白盒交换机领域，几乎被SONiC垄断。越来越多的大厂，如腾讯、百度、字节跳动、美团等等，纷纷加入sonic白盒大军。金主爸爸们急需大量熟悉sonic运维操作，sonic系统开发的工程师。而sonic与传统交换机无论是内在的网络结构以及外在命令配置上都有着不小的差异。</p><p>题主是早期国内某厂商的sonic主要开发维护人员，为该厂商向sonic社区提交了大量的代码，帮助厂商完成sonic产品线的雏形，有着一线的sonic的开发运维经验，可以帮助大家快速入门sonic，为大家跳槽大厂sonic开发运维岗位打下坚实基础。</p><h1 id="招生对象"><a href="#招生对象" class="headerlink" title="招生对象"></a>招生对象</h1><p>具备一定的数通经验，具备一定linux操作经验的同学。</p><ul><li>网络开发工程师</li><li>网络测试工程师</li><li>云计算开发工程师</li><li>有志于从事sonic开发、测试，想进大厂的在职同学，在校同学</li></ul><h1 id="我们的优势"><a href="#我们的优势" class="headerlink" title="我们的优势"></a>我们的优势</h1><p>当前sonic运维开发岗位需求很大，但是学习材料很少，实践机会更是几乎没有，无法形成对sonic体系化的认识。</p><p>题主根据自身的sonic开发经验，为大家部署了从sonic编译服务器到真机设备到虚拟化sonic仿真共计三套环境，以几近真实的工作开发环境为大家授课，辅以真实的sonic开发项目为教学实践课程，可以让大家迅速掌握sonic的开发技巧。</p><h2 id="讲师团队简介"><a href="#讲师团队简介" class="headerlink" title="讲师团队简介"></a>讲师团队简介</h2><p>本次sonic实战培训的讲师均为大厂一线sonic高级开发工程师，有着丰富的linux系统开发，内核开发，tcp/ip路由交换协议栈开发等全栈的交换路由设备开发能力。在为AWS、Google、Meta、字节跳动、美团、阿里巴巴等国际一流大厂的sonic代工开发过程积累了丰富的实战经验。</p><p><img src="https://rancho333.github.io/pictures/sonic_training.png"></p><h2 id="优质的课程内容"><a href="#优质的课程内容" class="headerlink" title="优质的课程内容"></a>优质的课程内容</h2><p>没有实践的学习，缺乏动手的机会，很容易失去兴奋点，容易懈怠。<br>没有理论指导的学习，往往不能深入，很容易原地踏步，容易迷茫！</p><p>本次课程理论实践相结合，提供真实的SONiC设备用于学员实验，对于通信协议方面，提供sonic社区支持的testbed环境，想学习CI/CT自动化测试的同学不容错过。对于不方便远程的同学，老师会教授同学们使用eveng仿真环境搭建SONiC虚拟环境用于学习。</p><h2 id="强大的实践能力"><a href="#强大的实践能力" class="headerlink" title="强大的实践能力"></a>强大的实践能力</h2><p>本次课程老师均为一线SONiC开发人员，除了手把手教授学员sonic实践课程之外，学员如果在工作遇到任何搞不定的sonic开发测试任务，老师均可指导甚至代为开发，让学员没有后顾之忧。</p><h1 id="你将获得这些能力"><a href="#你将获得这些能力" class="headerlink" title="你将获得这些能力"></a>你将获得这些能力</h1><ul><li>全面了解白盒和sonic的生态和前景</li><li>掌握sonic的系统架构</li><li>能够独立修改sonic代码，增减组件，完成系统编译</li><li>能够使用testbed进行sonic自动化测试</li></ul><h1 id="课程报名"><a href="#课程报名" class="headerlink" title="课程报名"></a>课程报名</h1><p>原价9999，现价4999。</p><ul><li>联系人：张老师，电话17602181452</li><li>课程时间：9月4号-9月27号，每周2,4,6上三次课，共计10次课程</li></ul><p>课程以线上会议的方式进行，老师会给同学提供vpn软件，使学员能够远程访问sonic实验设备。</p><h1 id="课程大纲"><a href="#课程大纲" class="headerlink" title="课程大纲"></a>课程大纲</h1><h2 id="lesson-1"><a href="#lesson-1" class="headerlink" title="lesson 1"></a>lesson 1</h2><ul><li>什么是白盒及白盒的优势</li><li>白盒发展现状及工作岗位需求</li><li>多种白盒操作系统比较(SONiC、DENT)</li><li>白盒的典型应用场景</li></ul><h2 id="lesson-2"><a href="#lesson-2" class="headerlink" title="lesson 2"></a>lesson 2</h2><ul><li>sonic背景介绍</li><li>sonic系统架构</li><li>sonic关键组件</li><li>SAI介绍</li><li>sonic关键技术docker</li></ul><h2 id="lesson-3"><a href="#lesson-3" class="headerlink" title="lesson 3"></a>lesson 3</h2><ul><li>sonic代码各模块介绍</li><li>submodule介绍</li></ul><h2 id="lesson-4"><a href="#lesson-4" class="headerlink" title="lesson 4"></a>lesson 4</h2><ul><li>sonic编译架构介绍</li><li>sonic编译环境说明</li><li>如何构建一个sonic编译环境</li><li>实战：基于jenkins实现sonic的自动化编译</li></ul><h2 id="lesson-5"><a href="#lesson-5" class="headerlink" title="lesson 5"></a>lesson 5</h2><ul><li>sonic安装过程说明</li><li>sonic如何识别不同的设备</li><li>如何基于社区代码添加一个新的设备</li><li>如何将代码提交到社区</li><li>实战：添加新设备所需的platform、device代码</li></ul><h2 id="lesson-6"><a href="#lesson-6" class="headerlink" title="lesson 6"></a>lesson 6</h2><ul><li>swss组件详解</li><li>syncd组件详解</li><li>bgp组件详解</li><li>database组件详解</li><li>各组件之间的交互</li></ul><h2 id="lesson-7"><a href="#lesson-7" class="headerlink" title="lesson 7"></a>lesson 7</h2><ul><li>SONiC CLI简介，click模块说明</li><li>sonic-mgmt模块介绍</li><li>json、CLI方式配置vlan</li><li>json、CLI方式配置BGP</li><li>json、CLI方式配置ACL</li></ul><h2 id="lesson-8"><a href="#lesson-8" class="headerlink" title="lesson 8"></a>lesson 8</h2><ul><li>实战：基于社区版sonic开发Mc-Lag功能</li></ul><h2 id="lesson-9"><a href="#lesson-9" class="headerlink" title="lesson 9"></a>lesson 9</h2><ul><li>实战：基于社区版sonic开发stp功能</li></ul><h2 id="lesson-10"><a href="#lesson-10" class="headerlink" title="lesson 10"></a>lesson 10</h2><ul><li>sonic testbed自动化测试框架</li><li>testbed t0/t1详解</li><li>实战：vrf测试及bug fix</li></ul>]]></content:encoded>
      
      
      
      <category domain="https://rancho333.github.io/tags/sonic/">sonic</category>
      
      
      <comments>https://rancho333.github.io/2022/07/26/sonic%E5%85%A5%E9%97%A8%E5%AE%9E%E6%88%98%E5%9F%B9%E8%AE%AD/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>ipv6单点双向重分布</title>
      <link>https://rancho333.github.io/2022/07/22/ipv6%E5%8D%95%E7%82%B9%E5%8F%8C%E5%90%91%E9%87%8D%E5%88%86%E5%B8%83/</link>
      <guid>https://rancho333.github.io/2022/07/22/ipv6%E5%8D%95%E7%82%B9%E5%8F%8C%E5%90%91%E9%87%8D%E5%88%86%E5%B8%83/</guid>
      <pubDate>Fri, 22 Jul 2022 02:41:42 GMT</pubDate>
      
      <description>&lt;h1 id=&quot;写在前面&quot;&gt;&lt;a href=&quot;#写在前面&quot; class=&quot;headerlink&quot; title=&quot;写在前面&quot;&gt;&lt;/a&gt;写在前面&lt;/h1&gt;&lt;p&gt;简单介绍下ipv6单点双向重分布的配置细节，cisco IOS中某些细节与ipv4实现有一些差异。&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<h1 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h1><p>简单介绍下ipv6单点双向重分布的配置细节，cisco IOS中某些细节与ipv4实现有一些差异。</p><span id="more"></span><h1 id="实验配置"><a href="#实验配置" class="headerlink" title="实验配置"></a>实验配置</h1><p>实验拓扑如下：<br><img src="https://rancho333.github.io/pictures/ipv6_redistribute_topology.png"></p><p>如图所示，R1-R2之间跑ospfv3，R2-R3之间跑eigrp。在R2上做单点双向重分布，是R1-R3上的lp0接口能相互ping通。</p><div class="tabs" id="tab"><ul class="nav-tabs"><li class="tab active"><a href="#tab-1">R1</a></li><li class="tab"><a href="#tab-2">R2</a></li><li class="tab"><a href="#tab-3">R3</a></li></ul><div class="tab-content"><div class="tab-pane active" id="tab-1"><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">ipv6 unicast-routing                    &#x2F;&#x2F; 全局开启ipv6路由功能</span><br><span class="line">！</span><br><span class="line">interface Loopback0</span><br><span class="line"> no ip address</span><br><span class="line"> ipv6 address 1111::1111&#x2F;128                &#x2F;&#x2F; 配置lp0 ipv6地址</span><br><span class="line"> ospfv3 110 ipv6 area 0                     &#x2F;&#x2F; 将接口加入ospfv3计算</span><br><span class="line">！</span><br><span class="line">interface Ethernet0&#x2F;0</span><br><span class="line"> no ip address</span><br><span class="line"> duplex auto</span><br><span class="line"> ipv6 address 2001::1&#x2F;64</span><br><span class="line"> ospfv3 110 ipv6 area 0</span><br><span class="line">！</span><br><span class="line">router ospfv3 110                   &#x2F;&#x2F; 创建ospfv3进程</span><br><span class="line"> !</span><br><span class="line"> address-family ipv6 unicast        &#x2F;&#x2F; 指名使用ipv6地址族</span><br><span class="line">  router-id 1.1.1.1                 &#x2F;&#x2F; 设置router id， 相较于ospfv2而言，没有这两项配置</span><br><span class="line"> exit-address-family</span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="tab-2"><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">ipv6 unicast-routing</span><br><span class="line">!</span><br><span class="line">interface Ethernet0&#x2F;0</span><br><span class="line"> no ip address</span><br><span class="line"> duplex auto</span><br><span class="line"> ipv6 address 2001::2&#x2F;64</span><br><span class="line"> ospfv3 110 ipv6 area 0</span><br><span class="line">!</span><br><span class="line">interface Ethernet0&#x2F;1</span><br><span class="line"> no ip address</span><br><span class="line"> duplex auto</span><br><span class="line"> ipv6 address 2002::2&#x2F;64</span><br><span class="line">!</span><br><span class="line">router eigrp rancho                         &#x2F;&#x2F; 命名模式eigrp，支持ipv4&amp;ipv6两种地址族</span><br><span class="line"> !</span><br><span class="line"> address-family ipv6 unicast autonomous-system 1        &#x2F;&#x2F; 指定ipv6地址族，默认会将所有ipv6接口加入eigrp计算</span><br><span class="line">  !</span><br><span class="line">  topology base                                         &#x2F;&#x2F; eigrp ipv6重定向需要到拓扑库中进行                     </span><br><span class="line">   redistribute ospf 110 metric 10000 10 255 1 1500 include-connected       &#x2F;&#x2F; 将ospf 110中的路由重定向到eigrp中，默认不包含直接路由，需要添加include-connected子命令</span><br><span class="line">  exit-af-topology</span><br><span class="line">  eigrp router-id 2.2.2.2                               &#x2F;&#x2F; 指定router id</span><br><span class="line"> exit-address-family</span><br><span class="line">!</span><br><span class="line">router ospfv3 110</span><br><span class="line"> !</span><br><span class="line"> address-family ipv6 unicast                &#x2F;&#x2F; 指定ipv6地址族</span><br><span class="line">  redistribute eigrp 1 include-connected       &#x2F;&#x2F; 同样默认不包含直接路由，需要添加子命令</span><br><span class="line">  router-id 2.2.2.2</span><br><span class="line"> exit-address-family</span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="tab-3"><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">ipv6 unicast-routing</span><br><span class="line">!</span><br><span class="line">interface Loopback0</span><br><span class="line"> no ip address</span><br><span class="line"> ipv6 address 3333::3333&#x2F;128</span><br><span class="line">!</span><br><span class="line">interface Loopback1</span><br><span class="line"> no ip address</span><br><span class="line"> ipv6 address 4444::4444&#x2F;128</span><br><span class="line"> !</span><br><span class="line"> interface Ethernet0&#x2F;0</span><br><span class="line"> no ip address</span><br><span class="line"> duplex auto</span><br><span class="line"> ipv6 address 2002::3&#x2F;64</span><br><span class="line">!</span><br><span class="line">router eigrp rancho</span><br><span class="line"> !</span><br><span class="line"> address-family ipv6 unicast autonomous-system 1</span><br><span class="line">  !</span><br><span class="line">  af-interface default                      &#x2F;&#x2F; eigrp默认将所有ipv6接口加入eigrp计算</span><br><span class="line">   shutdown                                 &#x2F;&#x2F; 将所有接口移除eigrp</span><br><span class="line">  exit-af-interface</span><br><span class="line">  !</span><br><span class="line">  af-interface Loopback0</span><br><span class="line">   no shutdown                              &#x2F;&#x2F; 指定的端口加入eigrp</span><br><span class="line">  exit-af-interface</span><br><span class="line">  !</span><br><span class="line">  af-interface Ethernet0&#x2F;0</span><br><span class="line">   no shutdown                               &#x2F;&#x2F; 指定的端口加入eigrp, 这样lp1就没有加入eigrp，R1上就没有对应的路由</span><br><span class="line">  exit-af-interface</span><br><span class="line">  !</span><br><span class="line">  topology base</span><br><span class="line">  exit-af-topology</span><br><span class="line">  eigrp router-id 3.3.3.3</span><br><span class="line"> exit-address-family</span><br></pre></td></tr></table></figure></div></div></div><p>查看R1上的ipv6路由表：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">R1#show ipv6 route | begin 3333  </span><br><span class="line">OE2 3333::3333&#x2F;128 [110&#x2F;20]</span><br><span class="line">     via FE80::A8BB:CCFF:FE00:2000, Ethernet0&#x2F;0</span><br></pre></td></tr></table></figure><p>在R1上ping R3的lp0:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">R1#ping 3333::3333 source 1111::1111</span><br><span class="line">Type escape sequence to abort.</span><br><span class="line">Sending 5, 100-byte ICMP Echos to 3333::3333, timeout is 2 seconds:</span><br><span class="line">Packet sent with a source address of 1111::1111</span><br><span class="line">!!!!!</span><br><span class="line">Success rate is 100 percent (5&#x2F;5), round-trip min&#x2F;avg&#x2F;max &#x3D; 1&#x2F;1&#x2F;1 ms</span><br></pre></td></tr></table></figure><p>有两点比较关键：</p><ul><li>ipv6动态路由协议重分布时，cisco体系中没有把直连路由包括进去，需要用子命令指名</li><li>eigrp默认将所有ipv6接口加入eigrp计算，如果只想把指定端口加进去，需要做额外的操作</li></ul>]]></content:encoded>
      
      
      
      
      <comments>https://rancho333.github.io/2022/07/22/ipv6%E5%8D%95%E7%82%B9%E5%8F%8C%E5%90%91%E9%87%8D%E5%88%86%E5%B8%83/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>ip_sla</title>
      <link>https://rancho333.github.io/2022/07/14/ip-sla/</link>
      <guid>https://rancho333.github.io/2022/07/14/ip-sla/</guid>
      <pubDate>Thu, 14 Jul 2022 09:08:32 GMT</pubDate>
      
      <description>&lt;h1 id=&quot;写在前面&quot;&gt;&lt;a href=&quot;#写在前面&quot; class=&quot;headerlink&quot; title=&quot;写在前面&quot;&gt;&lt;/a&gt;写在前面&lt;/h1&gt;&lt;p&gt;IP sla(service level agreement)服务等级协议，可以实时的收集ip网络的各种信息，包括latency、jitter、packet loss，连通性等。本文主要介绍sla在connectivity上的应用。在连通性检查上，可以说是BFD的升级版，BFD只能检测同一网段内的链路联通行，sla则可以跨网段。IP-SLA是思科私有协议，华为NQA与之对标。&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<h1 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h1><p>IP sla(service level agreement)服务等级协议，可以实时的收集ip网络的各种信息，包括latency、jitter、packet loss，连通性等。本文主要介绍sla在connectivity上的应用。在连通性检查上，可以说是BFD的升级版，BFD只能检测同一网段内的链路联通行，sla则可以跨网段。IP-SLA是思科私有协议，华为NQA与之对标。</p><span id="more"></span><h1 id="sla实验"><a href="#sla实验" class="headerlink" title="sla实验"></a>sla实验</h1><p>IP sla可以用来和track联动监控某个ip是否可达。实验拓扑如下：</p><p><img src="https://rancho333.github.io/pictures/sla_topology.png"><br>拓扑说明如下：<br>S1作为接入层交换机，vpc在vlan10中，S2，S3作为汇聚层交换机，跑vrrp提高网关可靠性，其中S2在vlan10中既是stp的根桥也是vrrp的master，这样可以提高链路的利用率。同理，如果增加vlan20,可将根桥和vrrp的角色给S3. R4上跑NAT做地址转换。S2上通过sla监控R4上loopback0的可达性，R7, R4, S2,S3,S5之间跑ospf，最终实现vpc与R7的互通。当S2的上行链路不可达时，S3成为vrrp的master接管vpc的流量。</p><h2 id="配置说明"><a href="#配置说明" class="headerlink" title="配置说明"></a>配置说明</h2><p>本实验的配置分为几块进行，分别是基础配置(vlan,stp,ip,routing)，vrrp配置，NAT配置，sla配置(sla,track,vrrp)。</p><p>基础配置(vlan,stp,ip,routing)如下：</p><div class="tabs" id="tab"><ul class="nav-tabs"><li class="tab active"><a href="#tab-1">vpc</a></li><li class="tab"><a href="#tab-2">S1</a></li><li class="tab"><a href="#tab-3">S2</a></li><li class="tab"><a href="#tab-4">S3</a></li><li class="tab"><a href="#tab-5">R4</a></li><li class="tab"><a href="#tab-6">R5</a></li><li class="tab"><a href="#tab-7">R7</a></li></ul><div class="tab-content"><div class="tab-pane active" id="tab-1"><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ip 192.168.1.10&#x2F;24 192.168.1.1</span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="tab-2"><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">interface Ethernet0&#x2F;0</span><br><span class="line"> switchport access vlan 10</span><br><span class="line">!</span><br><span class="line">interface Ethernet0&#x2F;1</span><br><span class="line"> switchport trunk encapsulation dot1q</span><br><span class="line"> switchport mode trunk</span><br><span class="line">!</span><br><span class="line">interface Ethernet0&#x2F;2</span><br><span class="line"> switchport trunk encapsulation dot1q</span><br><span class="line"> switchport mode trunk</span><br><span class="line"></span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="tab-3"><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">interface Loopback0</span><br><span class="line"> ip address 2.2.2.2 255.255.255.0</span><br><span class="line"> ip ospf 110 area 0</span><br><span class="line">!</span><br><span class="line">interface Ethernet0&#x2F;0</span><br><span class="line"> switchport trunk encapsulation dot1q</span><br><span class="line"> switchport mode trunk</span><br><span class="line">!</span><br><span class="line">interface Ethernet0&#x2F;1</span><br><span class="line"> no switchport</span><br><span class="line"> ip address 24.1.1.2 255.255.255.0</span><br><span class="line"> ip ospf 110 area 0</span><br><span class="line">!</span><br><span class="line">interface Ethernet0&#x2F;2</span><br><span class="line"> switchport trunk encapsulation dot1q</span><br><span class="line"> switchport mode trunk</span><br><span class="line">!</span><br><span class="line">interface Vlan10</span><br><span class="line"> ip address 192.168.1.2 255.255.255.0</span><br><span class="line"> ip ospf 110 area 0</span><br><span class="line">!</span><br><span class="line">router ospf 110</span><br><span class="line"></span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="tab-4"><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">interface Loopback3</span><br><span class="line"> ip address 3.3.3.3 255.255.255.0</span><br><span class="line"> ip ospf 110 area 0</span><br><span class="line">！</span><br><span class="line">interface Ethernet0&#x2F;0</span><br><span class="line"> switchport trunk encapsulation dot1q</span><br><span class="line"> switchport mode trunk</span><br><span class="line">!</span><br><span class="line">interface Ethernet0&#x2F;1</span><br><span class="line"> no switchport</span><br><span class="line"> ip address 35.1.1.3 255.255.255.0</span><br><span class="line"> ip ospf 110 area 0</span><br><span class="line">!</span><br><span class="line">interface Ethernet0&#x2F;2</span><br><span class="line"> switchport trunk encapsulation dot1q</span><br><span class="line"> switchport mode trunk</span><br><span class="line">!</span><br><span class="line">interface Vlan10</span><br><span class="line"> ip address 192.168.1.3 255.255.255.0</span><br><span class="line"> ip ospf 110 area 0</span><br><span class="line">!</span><br><span class="line">router ospf 110</span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="tab-5"><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">interface Loopback0</span><br><span class="line"> ip address 4.4.4.4 255.255.255.255</span><br><span class="line"> ip ospf 110 area 0</span><br><span class="line">!</span><br><span class="line">interface Ethernet0&#x2F;0</span><br><span class="line"> ip address 24.1.1.4 255.255.255.0</span><br><span class="line"> ip ospf 110 area 0</span><br><span class="line"> duplex auto</span><br><span class="line">!</span><br><span class="line">interface Ethernet0&#x2F;1</span><br><span class="line"> ip address 47.1.1.4 255.255.255.0</span><br><span class="line"> ip ospf 110 area 0</span><br><span class="line"> duplex auto</span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="tab-6"><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">interface Loopback0</span><br><span class="line"> ip address 5.5.5.5 255.255.255.255</span><br><span class="line"> ip ospf 110 area 0</span><br><span class="line">!</span><br><span class="line">interface Ethernet0&#x2F;0</span><br><span class="line"> ip address 35.1.1.5 255.255.255.0</span><br><span class="line"> ip ospf 110 area 0</span><br><span class="line"> duplex auto</span><br><span class="line">!</span><br><span class="line">interface Ethernet0&#x2F;1</span><br><span class="line"> ip address 57.1.1.5 255.255.255.0</span><br><span class="line"> ip ospf 110 area 0</span><br><span class="line"> duplex auto</span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="tab-7"><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">interface Loopback0</span><br><span class="line"> ip address 7.7.7.7 255.255.255.0</span><br><span class="line"> ip ospf 110 area 0</span><br><span class="line">!</span><br><span class="line">interface Ethernet0&#x2F;0</span><br><span class="line"> ip address 47.1.1.7 255.255.255.0</span><br><span class="line"> ip ospf 110 area 0</span><br><span class="line"> duplex auto</span><br><span class="line">!</span><br><span class="line">interface Ethernet0&#x2F;1</span><br><span class="line"> ip address 57.1.1.7 255.255.255.0</span><br><span class="line"> ip ospf 110 area 0</span><br><span class="line"> duplex auto</span><br></pre></td></tr></table></figure></div></div></div><p>基础配置很简单，就是vlan，ip，ospf的基本配置。接下来在S2、S3上面配置vrrp。</p><div class="tabs" id="tab"><ul class="nav-tabs"><li class="tab active"><a href="#tab-1">S2</a></li><li class="tab"><a href="#tab-2">S3</a></li></ul><div class="tab-content"><div class="tab-pane active" id="tab-1"><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">interface Vlan10</span><br><span class="line"> vrrp 1 ip 192.168.1.1          &#x2F;&#x2F; 创建vrrp，虚拟网关ip为192。168.1.1</span><br><span class="line"> vrrp 1 priority 150            &#x2F;&#x2F; 增加s2的vrrp优先级，使其成为master</span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="tab-2"><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">interface Vlan10</span><br><span class="line"> vrrp 1 ip 192.168.1.1          &#x2F;&#x2F; S3上面配置vrrp，使其成为backup</span><br></pre></td></tr></table></figure></div></div></div><p>查看vrrp的基本信息：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">S2#show vrrp brief </span><br><span class="line">Interface          Grp Pri Time  Own Pre State   Master addr     Group addr</span><br><span class="line">Vl10               1   150 3414       Y  Master  192.168.1.2     192.168.1.1    </span><br><span class="line"></span><br><span class="line">在vpc上测试网关是否可达：</span><br><span class="line">VPCS&gt; ping 192.168.1.1 -c 1</span><br><span class="line">84 bytes from 192.168.1.1 icmp_seq&#x3D;1 ttl&#x3D;255 time&#x3D;0.435 ms</span><br></pre></td></tr></table></figure><p>NAT配置如下，这里做一个简单的nat配置，复用出端口ip。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">ip access-list standard NAT</span><br><span class="line"> permit 192.168.1.0 0.0.0.255          &#x2F;&#x2F; 创建acl，匹配192.168.1.0网段的ip</span><br><span class="line"></span><br><span class="line">ip nat inside source list NAT interface Ethernet0&#x2F;1 overload &#x2F;&#x2F;创建nat，转换source，匹配NAT的acl，复用eth0&#x2F;0的IP地址</span><br><span class="line"></span><br><span class="line">interface Ethernet0&#x2F;0</span><br><span class="line"> ip nat inside              &#x2F;&#x2F; 确定source，dest</span><br><span class="line"></span><br><span class="line">interface Ethernet0&#x2F;1</span><br><span class="line"> ip nat outside              &#x2F;&#x2F; 确定source，dest</span><br></pre></td></tr></table></figure><p>R5上的NAT配置和R4一模一样，完成之后vpc就可以ping通<code>7.7.7.7</code>了。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">VPCS&gt; ping 7.7.7.7 -c 1</span><br><span class="line">84 bytes from 7.7.7.7 icmp_seq&#x3D;1 ttl&#x3D;253 time&#x3D;1.043 ms</span><br><span class="line"></span><br><span class="line">在R4上查看NAT转换：</span><br><span class="line">R4#show ip nat translations </span><br><span class="line">Pro Inside global      Inside local       Outside local      Outside global</span><br><span class="line">icmp 47.1.1.4:36346    192.168.1.10:36346 7.7.7.7:36346      7.7.7.7:36346</span><br></pre></td></tr></table></figure><p>此时一切都还顺利，但是当我们将R4关机后，会发现vpc ping不通7.7.7.7，这是因为S2，S3无法感知上游链路的故障，所以依然认为S2是vrrp master，ospf的收敛时间比较久，所以S2上到7.7.7.7的下一跳依然是eth0/1，自然不通。我们创建sla来感知上游链路故障，分别在S2、S3上配置：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 创建sla</span><br><span class="line">ip sla 1                                        &#x2F;&#x2F; 创建sla 1</span><br><span class="line"> icmp-echo 4.4.4.4 source-ip 2.2.2.2            &#x2F;&#x2F; sla的监控事项是：源2.2.2.2与dest4.4.4.4的联通性</span><br><span class="line"> frequency 5                                    &#x2F;&#x2F; 评率是5秒一次</span><br><span class="line">ip sla schedule 1 life forever start-time now   &#x2F;&#x2F; sla 1的时间表，从现在开始，生命周期为永远</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; sla与track的联动</span><br><span class="line">track 1 ip sla 1                                &#x2F;&#x2F; track监控sla的结果</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; track与vrrp的联动</span><br><span class="line">interface Vlan10</span><br><span class="line"> vrrp 1 track 1 decrement 60                    &#x2F;&#x2F; 如果track失败，vrrp优先级降低60</span><br></pre></td></tr></table></figure><p>S3上镜像S2的sla配置，查看sla的状态信息：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">S2#show ip sla summary | begin ID       </span><br><span class="line">ID           Type        Destination       Stats       Return      Last</span><br><span class="line">                                           (ms)        Code        Run </span><br><span class="line">-----------------------------------------------------------------------</span><br><span class="line">*1           icmp-echo   4.4.4.4           RTT&#x3D;1       OK          1 second ago</span><br><span class="line"></span><br><span class="line">S2#show track 1 </span><br><span class="line">Track 1</span><br><span class="line">  IP SLA 1 state</span><br><span class="line">  State is Up</span><br><span class="line">    7 changes, last change 00:08:26</span><br><span class="line">  Latest operation return code: OK</span><br><span class="line">  Latest RTT (millisecs) 1</span><br><span class="line">  Tracked by:</span><br><span class="line">    VRRP Vlan10 1</span><br></pre></td></tr></table></figure><p>现在将R4关机，查看sla的状态信息以及vrrp的状态信息：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">S2#show ip sla summary | begin ID  </span><br><span class="line">ID           Type        Destination       Stats       Return      Last</span><br><span class="line">                                           (ms)        Code        Run </span><br><span class="line">-----------------------------------------------------------------------</span><br><span class="line">*1           icmp-echo   4.4.4.4           -           Timeout     12 seconds ag</span><br><span class="line"></span><br><span class="line">S2#show vrrp brief </span><br><span class="line">Interface          Grp Pri Time  Own Pre State   Master addr     Group addr</span><br><span class="line">Vl10               1   90  3414       Y  Backup  192.168.1.3     192.168.1.1    </span><br></pre></td></tr></table></figure><p>可以看到S2的优先级现在是90，S3是master了。track interface可以实现类似的效果，但当R4的eth1 down掉之后，S2和R4之间端口都是up，无法检测出故障，sla直接检测ip的联通性适用性更广，我们设置可以在s2上直接检测到7.7.7.7的连通性。</p><p>将R4开机后，S2重新成为vrrp master, 故障恢复。</p>]]></content:encoded>
      
      
      
      
      <comments>https://rancho333.github.io/2022/07/14/ip-sla/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>offset_list_and_pbr</title>
      <link>https://rancho333.github.io/2022/07/14/offset-list-and-pbr/</link>
      <guid>https://rancho333.github.io/2022/07/14/offset-list-and-pbr/</guid>
      <pubDate>Thu, 14 Jul 2022 06:06:00 GMT</pubDate>
      
      <description>&lt;h1 id=&quot;写在前面&quot;&gt;&lt;a href=&quot;#写在前面&quot; class=&quot;headerlink&quot; title=&quot;写在前面&quot;&gt;&lt;/a&gt;写在前面&lt;/h1&gt;&lt;p&gt;路由控制的方式有很多，比如route-map，distribute-list。今天主要了解下offset-list(偏移列表)和pbr(policy based routing, 策略路由).&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<h1 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h1><p>路由控制的方式有很多，比如route-map，distribute-list。今天主要了解下offset-list(偏移列表)和pbr(policy based routing, 策略路由).</p><span id="more"></span><h1 id="offset-list简述"><a href="#offset-list简述" class="headerlink" title="offset-list简述"></a>offset-list简述</h1><p>offset-list非常简单，理论特点可以概括为下面几条：</p><ul><li>只能在距离矢量路由协议上使用(rip，eigrp)，ospf中直接使用cost控制</li><li>支支持ACL不支持prefix-list</li><li>只可以增大metric不可以减小metric(eigrp中是metric，rip中是hop-count)</li><li>在调用方向上，可以在in/out上调用，作用对象不同，效果自然有所差异</li></ul><h2 id="offset-list实验"><a href="#offset-list实验" class="headerlink" title="offset-list实验"></a>offset-list实验</h2><p>拓扑图如下：</p><p><img src="https://rancho333.github.io/pictures/offset_list_topology.png"></p><p>在R2、R4上的lp0上设置相同的ip地址4.4.4.4(仅实验效果)，三台路由器均运行eigrp, 则R1上对4.4.4.4有两个下一跳。基本配置如下：</p><div class="tabs" id="tab"><ul class="nav-tabs"><li class="tab active"><a href="#tab-1">R1</a></li><li class="tab"><a href="#tab-2">R2</a></li><li class="tab"><a href="#tab-3">R3</a></li></ul><div class="tab-content"><div class="tab-pane active" id="tab-1"><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">interface Ethernet0&#x2F;0</span><br><span class="line"> ip address 12.1.1.1 255.255.255.0</span><br><span class="line">!</span><br><span class="line">interface Ethernet0&#x2F;1</span><br><span class="line"> ip address 13.1.1.1 255.255.255.0</span><br><span class="line">!</span><br><span class="line">router eigrp 90</span><br><span class="line"> network 12.1.1.0 0.0.0.255</span><br><span class="line"> network 13.1.1.0 0.0.0.255</span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="tab-2"><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">interface Loopback0</span><br><span class="line"> ip address 4.4.4.4 255.255.255.255</span><br><span class="line">!</span><br><span class="line">interface Ethernet0&#x2F;0</span><br><span class="line"> ip address 12.1.1.2 255.255.255.0</span><br><span class="line">!</span><br><span class="line">router eigrp 90</span><br><span class="line"> network 4.4.4.4 0.0.0.0</span><br><span class="line"> network 12.1.1.0 0.0.0.255</span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="tab-3"><p>interface Loopback0<br> ip address 4.4.4.4 255.255.255.255<br>!<br>interface Ethernet0/0<br> ip address 13.1.1.3 255.255.255.0<br>!<br>router eigrp 90<br> network 4.4.4.4 0.0.0.0<br> network 13.1.1.0 0.0.0.255</p></div></div></div><p>查看R1上的路由表：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">R1#show ip route eigrp | begin 4.4.4.4</span><br><span class="line">D        4.4.4.4 [90&#x2F;409600] via 13.1.1.3, 00:00:10, Ethernet0&#x2F;1</span><br><span class="line">                 [90&#x2F;409600] via 12.1.1.2, 00:00:10, Ethernet0&#x2F;0</span><br></pre></td></tr></table></figure><p>可以发现<code>4.4.4.4</code>的两个下一跳有相同的metric值，所以现在是ecmp。我们在R1的eth0 in方向上做一个offset-list来修改R2通告过来的路由metric。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">R1(config)#ip access-list standard 12           &#x2F;&#x2F; 创建标准acl，编号12</span><br><span class="line">R1(config-std-nacl)#permit 4.4.4.4              &#x2F;&#x2F; 匹配4.4.4.4的路由</span><br><span class="line">R1(config)#router eigrp 90</span><br><span class="line">R1(config-router)#offset-list 12 in 1 ethernet 0&#x2F;0          &#x2F;&#x2F; 在eth0&#x2F;0的in方向上调用acl 12, 匹配上后将metric增加1</span><br></pre></td></tr></table></figure><p>分别查看R1上eigrp的拓扑信息和路由信息：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">R1#show ip eigrp topology | begin 4.4.4.4</span><br><span class="line">P 4.4.4.4&#x2F;32, 1 successors, FD is 409600</span><br><span class="line">        via 13.1.1.3 (409600&#x2F;128256), Ethernet0&#x2F;1</span><br><span class="line">        via 12.1.1.2 (409601&#x2F;128256), Ethernet0&#x2F;0           &#x2F;&#x2F; 发现R2传来的4.4.4.4路由的metric加1</span><br><span class="line"></span><br><span class="line">R1#show ip route eigrp | begin 4.4.4.4</span><br><span class="line">D        4.4.4.4 [90&#x2F;409600] via 13.1.1.3, 00:05:44, Ethernet0&#x2F;1        &#x2F;&#x2F; 4.4.4.4只有R3一个下一跳</span><br></pre></td></tr></table></figure><p>同样的原理，在R2,R3的eth上配置out方向的offset-list可以达到同样的控制效果。</p><h1 id="pbr简述"><a href="#pbr简述" class="headerlink" title="pbr简述"></a>pbr简述</h1><p>pbr是route-map的一种应用，pbr是可以按照管理员思想去实现的路由, 我想让你往哪走，你就往哪走。pbr的优先级高于路由表，内容不会出现在路由表中。</p><h2 id="pbr实验"><a href="#pbr实验" class="headerlink" title="pbr实验"></a>pbr实验</h2><p>沿用上面offset-list的拓扑图，在R2上创建lp1:5.5.5.5，在R1上创建pbr使得R1到5.5.5.5路由可达。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">R1(config)#ip access-list extended 100              &#x2F;&#x2F; 创建扩展acl 100</span><br><span class="line">R1(config-ext-nacl)#permit ip any 5.5.5.5 255.255.255.255       &#x2F;&#x2F; 匹配5.5.5.5的路由</span><br><span class="line">R1(config)#route-map pbr permit 10                      &#x2F;&#x2F; 创建route-map</span><br><span class="line">R1(config-route-map)#match ip address 100               &#x2F;&#x2F; 匹配acl 100</span><br><span class="line">R1(config-route-map)#set ip next-hop 12.1.1.2           &#x2F;&#x2F; 设置下一跳ip</span><br><span class="line">R1(config)#ip local policy route-map pbr                &#x2F;&#x2F; 开启本地route-map转发，对本设备始发的流量开启pbr</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; R1(config-if)#ip policy route-map pbr           如果是本地转发的流量，需要在收到流量的接口下开启pbr</span><br></pre></td></tr></table></figure><p>此时查看本地路由表：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">R1#show ip route | include 5.5.5.5</span><br><span class="line">R1#</span><br><span class="line">R1#ping 5.5.5.5</span><br><span class="line">Type escape sequence to abort.</span><br><span class="line">Sending 5, 100-byte ICMP Echos to 5.5.5.5, timeout is 2 seconds:</span><br><span class="line">!!!!!</span><br><span class="line">Success rate is 100 percent (5&#x2F;5), round-trip min&#x2F;avg&#x2F;max &#x3D; 1&#x2F;1&#x2F;1 ms</span><br><span class="line">R1#</span><br></pre></td></tr></table></figure><p>发现路由表中是没有5.5.5.5的路由，但是可以ping通。可通过下面方式查看本地pbr策略：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">R1#show ip local policy </span><br><span class="line">Local policy routing is enabled, using route map pbr</span><br><span class="line">route-map pbr, permit, sequence 10</span><br><span class="line">  Match clauses:</span><br><span class="line">    ip address (access-lists): 100 </span><br><span class="line">  Set clauses:</span><br><span class="line">    ip next-hop 12.1.1.2</span><br><span class="line">  Policy routing matches: 20 packets, 2000 bytes</span><br></pre></td></tr></table></figure><p>为了验证pbr的优先级高于路由表，我们在R3上同样创建lp1:5.5.5.5, 并宣告进eigrp，此时R1的路由表中：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">R1#show ip route | include 5.5.5.5</span><br><span class="line">D        5.5.5.5 [90&#x2F;409600] via 13.1.1.3, 00:00:21, Ethernet0&#x2F;1</span><br><span class="line"></span><br><span class="line">R1#trace 5.5.5.5</span><br><span class="line">Type escape sequence to abort.</span><br><span class="line">Tracing the route to 5.5.5.5</span><br><span class="line">VRF info: (vrf in name&#x2F;id, vrf out name&#x2F;id)</span><br><span class="line">  1 12.1.1.2 0 msec 1 msec * </span><br><span class="line">R1#</span><br></pre></td></tr></table></figure><p>发现R1上到5.5.5.5的下一跳是按照pbr走的，并不是按照路由表做的。</p>]]></content:encoded>
      
      
      
      <category domain="https://rancho333.github.io/tags/routing/">routing</category>
      
      
      <comments>https://rancho333.github.io/2022/07/14/offset-list-and-pbr/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>路由标记</title>
      <link>https://rancho333.github.io/2022/07/12/%E8%B7%AF%E7%94%B1%E6%A0%87%E8%AE%B0/</link>
      <guid>https://rancho333.github.io/2022/07/12/%E8%B7%AF%E7%94%B1%E6%A0%87%E8%AE%B0/</guid>
      <pubDate>Tue, 12 Jul 2022 06:59:07 GMT</pubDate>
      
      <description>&lt;h1 id=&quot;写在前面&quot;&gt;&lt;a href=&quot;#写在前面&quot; class=&quot;headerlink&quot; title=&quot;写在前面&quot;&gt;&lt;/a&gt;写在前面&lt;/h1&gt;&lt;p&gt;路由标记其实就是路由的一个属性。有了tag属性，可以对具有相同tag属性的一组路由进行操作(过滤、修改路由类型，修改metric值等)。BGP中有个非常类似的属性：community属性。&lt;br&gt;一般情况下内部路由不打标记，外部路由打标记。&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<h1 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h1><p>路由标记其实就是路由的一个属性。有了tag属性，可以对具有相同tag属性的一组路由进行操作(过滤、修改路由类型，修改metric值等)。BGP中有个非常类似的属性：community属性。<br>一般情况下内部路由不打标记，外部路由打标记。</p><span id="more"></span><h2 id="ospf打标记"><a href="#ospf打标记" class="headerlink" title="ospf打标记"></a>ospf打标记</h2><p>ospf将外部路由重分布进ospf时支持直接打标机（也可以使用路由策略route-map）。拓扑图如下：</p><p><img src="https://rancho333.github.io/pictures/routing_tag.png"><br>R1,R2的eth0上运行ospf，R2上创建lp0接口，将lp0重分布到ospf中，并打上标记，使R1学到。配置如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">R1</span><br><span class="line">interface Ethernet0&#x2F;0</span><br><span class="line"> ip address 12.1.1.1 255.255.255.0</span><br><span class="line"> ip ospf 110 area 0</span><br><span class="line">！</span><br><span class="line">router ospf 110</span><br><span class="line"></span><br><span class="line">R2</span><br><span class="line">!</span><br><span class="line">interface Loopback0</span><br><span class="line"> ip address 2.2.2.2 255.255.255.255</span><br><span class="line">!</span><br><span class="line">interface Ethernet0&#x2F;0</span><br><span class="line"> ip address 12.1.1.12 255.255.255.0</span><br><span class="line"> ip ospf 110 area 0</span><br><span class="line">!</span><br><span class="line">router ospf 110</span><br><span class="line"> redistribute connected subnets tag 12                  &#x2F;&#x2F; 重分布直连路由进ospf，并打上tag：12</span><br></pre></td></tr></table></figure><p>在R1上查看2.2.2.2的ospf database信息：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">R1#show ip ospf database                  </span><br><span class="line">Type-5 AS External Link States</span><br><span class="line"></span><br><span class="line">Link ID         ADV Router      Age         Seq#       Checksum Tag</span><br><span class="line">2.2.2.2         12.1.1.12       609         0x80000002 0x009ED2 12</span><br></pre></td></tr></table></figure><p>发现已经打上tag：12的标记。之后就可以创建route-map，match这个tag，之后就可以set各种操作。</p><p>此外，还可以通过<code>route-map</code>来打tag.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">R2(config)#route-map tag permit 10           &#x2F;&#x2F; 创建一个route-map，名字叫tag</span><br><span class="line">R2(config-route-map)#set tag 20              &#x2F;&#x2F; 动作时设置tag20</span><br><span class="line">R2(config-router)#redistribute connected route-map tag          &#x2F;&#x2F; 重分布时使能该route-map</span><br></pre></td></tr></table></figure><p>在R1上查看ospf的database信息：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">R1#show ip ospf database </span><br><span class="line">Type-5 AS External Link States</span><br><span class="line"></span><br><span class="line">Link ID         ADV Router      Age         Seq#       Checksum Tag</span><br><span class="line">2.2.2.2         12.1.1.12       4           0x80000001 0x003139 20</span><br></pre></td></tr></table></figure><p>ospf和eigrp都支持tag，两者在重分布时会携带tag到对方的路由域。</p><h2 id="eigrp打标记"><a href="#eigrp打标记" class="headerlink" title="eigrp打标记"></a>eigrp打标记</h2><p>eigrp中不能直接打tag，只能通过route-map方式打标记。命令和ospf一样。eigrp上查看标记：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">R1#show ip eigrp topology </span><br><span class="line">P 2.2.2.2&#x2F;32, 1 successors, FD is 409600, tag is 20         &#x2F;&#x2F; tag是上面route-map定义的</span><br><span class="line">        via 12.1.1.12 (409600&#x2F;128256), Ethernet0&#x2F;0</span><br></pre></td></tr></table></figure><p>eigrp在命名模式下可以给内部路由打标记，</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">R2(config-router)#eigrp upgrade-cli rancho              &#x2F;&#x2F; 可以直接从经典模式升级到命名模式，好处是邻居状态不会发生变化</span><br><span class="line">R2(config-router)#address-family ipv4 autonomous-system 90</span><br><span class="line">R2(config-router-af)#eigrp default-route-tag 45</span><br><span class="line"></span><br><span class="line">R2(config-router-af)#eigrp default-route-tag 10.10.10.10        &#x2F;&#x2F; 如果是使用点分十进制打tag，那么对端显示的是十进制数字</span><br><span class="line">R1(config)#route-tag notation dotted-decimal                    &#x2F;&#x2F; 需要修改route tag的显示方式</span><br></pre></td></tr></table></figure><h2 id="tag结合distribute-list过滤路由"><a href="#tag结合distribute-list过滤路由" class="headerlink" title="tag结合distribute-list过滤路由"></a>tag结合distribute-list过滤路由</h2><p>在R1上创建route-map，匹配R2上打的tag，分发列表中调用该route-map</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">R1(config)#route-map deny-tag deny 10           &#x2F;&#x2F; 创建route-map</span><br><span class="line">R1(config-route-map)#match tag 20               &#x2F;&#x2F; 匹配tag 20</span><br><span class="line">R1(config)#router eigrp 90</span><br><span class="line">R1(config-router)#distribute-list route-map deny-tag in     &#x2F;&#x2F;使能分发列表</span><br><span class="line"></span><br><span class="line">R1(config)#route-map deny-tag permit 20         &#x2F;&#x2F; 创建deny-tag的permit语句，否则分发列表会隐式过滤所有路由</span><br><span class="line"></span><br><span class="line">R2(config)#interface loopback 1</span><br><span class="line">R2(config-if)#ip address 3.3.3.3 255.255.255.255</span><br><span class="line">R2(config)#router eigrp 90</span><br><span class="line">R2(config-router)#network 3.3.3.3</span><br></pre></td></tr></table></figure><p>查看R1上路由表：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">R1#show ip route          </span><br><span class="line">      3.0.0.0&#x2F;32 is subnetted, 1 subnets</span><br><span class="line">D        3.3.3.3 [90&#x2F;409600] via 12.1.1.12, 00:00:06, Ethernet0&#x2F;0</span><br><span class="line">      12.0.0.0&#x2F;8 is variably subnetted, 2 subnets, 2 masks</span><br><span class="line">C        12.1.1.0&#x2F;24 is directly connected, Ethernet0&#x2F;0</span><br><span class="line">L        12.1.1.1&#x2F;32 is directly connected, Ethernet0&#x2F;0</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>可以看到<code>2.2.2.2</code>的路由已经被过滤了，没有路由tag的3.3.3.3可以正常看到。</p><h2 id="rip打tag"><a href="#rip打tag" class="headerlink" title="rip打tag"></a>rip打tag</h2><p>rip只能在version2上打标记，方法和eigrp相同。</p>]]></content:encoded>
      
      
      
      <category domain="https://rancho333.github.io/tags/routing/">routing</category>
      
      
      <comments>https://rancho333.github.io/2022/07/12/%E8%B7%AF%E7%94%B1%E6%A0%87%E8%AE%B0/#disqus_thread</comments>
      
    </item>
    
  </channel>
</rss>
