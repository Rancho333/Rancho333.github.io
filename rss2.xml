<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Rancho Blog</title>
    <link>https://rancho333.github.io/</link>
    
    <atom:link href="https://rancho333.github.io/rss2.xml" rel="self" type="application/rss+xml"/>
    
    <description>No pain, no gain!</description>
    <pubDate>Tue, 20 Jun 2023 03:18:22 GMT</pubDate>
    <generator>http://hexo.io/</generator>
    
    <item>
      <title>lab考试基本介绍及考题分析</title>
      <link>https://rancho333.github.io/2023/06/19/lab%E8%80%83%E8%AF%95%E5%9F%BA%E6%9C%AC%E4%BB%8B%E7%BB%8D%E5%8F%8A%E8%80%83%E9%A2%98%E5%88%86%E6%9E%90/</link>
      <guid>https://rancho333.github.io/2023/06/19/lab%E8%80%83%E8%AF%95%E5%9F%BA%E6%9C%AC%E4%BB%8B%E7%BB%8D%E5%8F%8A%E8%80%83%E9%A2%98%E5%88%86%E6%9E%90/</guid>
      <pubDate>Mon, 19 Jun 2023 08:18:42 GMT</pubDate>
      
      <description>&lt;h1 id=&quot;lab基本介绍&quot;&gt;&lt;a href=&quot;#lab基本介绍&quot; class=&quot;headerlink&quot; title=&quot;lab基本介绍&quot;&gt;&lt;/a&gt;lab基本介绍&lt;/h1&gt;&lt;p&gt;在22年9月份考过CCNP(350-408)的笔试后就一直在约lab的考试，终于在今年(23)4月份约了一个北京考场的位置，5月初开始正式备考。EI CCIE lab考试总共分为两个部分，第一部分是design，全部是笔试，共计39题(第一题介绍，最后一题say goodby)，3小时内完成；第二部分是DOO(deploy，operate，optimize)，共计5小时。design做完可以提前交卷，3小时中剩下的时间则直接作废，不会加给DOO使用。DOO就是lab实操了，诶，主要分为三块，一是传统网络，而是SDN网络，三是自动化。传统网络共计16个小题，SDN网络共计6个小题，自动化共计三个小题。每个部分中都有一个选择题。&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<h1 id="lab基本介绍"><a href="#lab基本介绍" class="headerlink" title="lab基本介绍"></a>lab基本介绍</h1><p>在22年9月份考过CCNP(350-408)的笔试后就一直在约lab的考试，终于在今年(23)4月份约了一个北京考场的位置，5月初开始正式备考。EI CCIE lab考试总共分为两个部分，第一部分是design，全部是笔试，共计39题(第一题介绍，最后一题say goodby)，3小时内完成；第二部分是DOO(deploy，operate，optimize)，共计5小时。design做完可以提前交卷，3小时中剩下的时间则直接作废，不会加给DOO使用。DOO就是lab实操了，诶，主要分为三块，一是传统网络，而是SDN网络，三是自动化。传统网络共计16个小题，SDN网络共计6个小题，自动化共计三个小题。每个部分中都有一个选择题。</p><span id="more"></span><p>这个系列的blog主要用来对这个版本lab的网络做一个基本分析，注意在2023年9月之后lab会改版。</p><h1 id="lab-拓扑全景"><a href="#lab-拓扑全景" class="headerlink" title="lab 拓扑全景"></a>lab 拓扑全景</h1><p>整个lab的所有设备及连接如下图所示：</p><p><img src="https://rancho333.github.io/pictures/lab1.1_topology.drawio.png"></p><p>这个图实际上还是很复杂的，总共由10个sites组成，分别是：</p><ul><li>HQ(head quarter)：主要跑ospf, eigrp v6，bgp等，虽然r12和ISP互联，但是默认从DC访问互联网</li><li>DC(data center)：整个网络的中心，跑ospf, dmvpn，eigrp等，DHCP server, DMVPN hub, viptela，DNAc都部署在里面</li><li>IaaS(Infrastructure as a service) 主要用来做自动化，以及ping通R30的ipv6 loopback</li><li>ISP(Internet service provider) 提供8.8.8.8，并且会通过BGP下发默认路由</li><li>SP1(service provider 1) 主要跑mpls,bgp，起到连接各个sites的作用</li><li>SP2 通SP1，上面只跑BGP</li><li>Branch1 分支1，跑SDN，viptela的overlay是DNAc的underlay，viptela在vedge之间构建好vpn通过，DNAc基于此对物理交换机进行纳管，注意SW400是border/edge两种角色一体</li><li>Branch2 分支2，跑SDN，大部分同branch1, sw501和sw502是border角色，sw510是edge</li><li>Branch3 分支3，跑DMVPN，作为spoken</li><li>Branch4 分支4，跑DMVPN，作为spoken</li></ul><p>最终的目的其实很简单，就是使用L2，L3，SDN等网络技术使所有主机都获取到ip地址，并能访问ISP中的8.8.8.8(google DNS服务器)</p><h2 id="传统1-2"><a href="#传统1-2" class="headerlink" title="传统1.2"></a>传统1.2</h2><p>1.1是introduction，不用管。下面是1.2的题目。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">Complete and correct the etherchannel configuration between switches sw101,sw102,sw110 according to these requirements：</span><br><span class="line">1. At the end of the task，all ethernetchannels between switches sw101, sw102 must be up and operational including all their physical member links</span><br><span class="line">2. Do not create new port-channel interfaces; reuse that already exist on the switches</span><br><span class="line">3. When resolving existing issues，do not change the preconfigured negotiation protocol（if any）</span><br><span class="line">4. On ethernetchannel that use a negotiation protocol，tune its mode of operation for the shortest link bunding time possible</span><br><span class="line"></span><br><span class="line">Configure VTP version 3 on these switches as follows:</span><br><span class="line">1. VTP domain must be set to CCIE</span><br><span class="line">2. VTP password must be cc1E@fab</span><br><span class="line">3. When displayed, the VTP password must be shown as 32-character hexadecimal string</span><br><span class="line">4. sw101 must be configured as VTP server for the MST feature</span><br><span class="line">5. sw102 &amp; sw110 must be configured as VTP client for the MST feature</span><br><span class="line"></span><br><span class="line">These switches must run MST and maintain 3 instances including the default instance 0 as follows：</span><br><span class="line">1. Associate vlans 1001-2000 in instance 1</span><br><span class="line">2. Associate vlans 2001-4094 in instance 2</span><br><span class="line">3. sw101 must be root for the default instance 0 and instance 1</span><br><span class="line">4. sw102 must be root for instance 2</span><br></pre></td></tr></table></figure><p>1.2的拓扑示意如下：<br><img src="https://rancho333.github.io/pictures/lab_1.2.png"></p><p>结构很简单，涉及到三台设备：sw101,sw102,sw110，三台交换机之间通过portchannel连接，其中sw101和sw110之间走staic，其它两条走LACP。配置思路如下</p><ul><li>修复portchannel配置，打通二层连接</li><li>配置VTP，其中sw101作为VTP server, 另外两台作为vtp client</li><li>配置mst，其中sw101作为instance 0-1的根，sw102作为instance 2的根</li></ul><p>下面是实际配置：</p><ol><li><p>修复portchannel配置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">sw101：</span><br><span class="line">int range gi 1&#x2F;2-3</span><br><span class="line">    channel-group 1 mode on</span><br><span class="line">sw102:</span><br><span class="line">int range gi 1&#x2F;2-3</span><br><span class="line">    channel-group 2 mode active</span><br><span class="line">sw110:</span><br><span class="line">int range gi 1&#x2F;2-3</span><br><span class="line">    channel-group 2 mode active</span><br><span class="line">int port-channel 1</span><br><span class="line">    shutdown</span><br><span class="line">    no shutdown             &#x2F;&#x2F; po1是静态lag，对端修改配置后，本地down&#x2F;up使其获取最新状态</span><br></pre></td></tr></table></figure><p>配置完成之后，检查po端口状态, pc全部都是<code>SU</code>状态，物理成员端口全部都是<code>P</code>状态，字母含义在show中有说明。<br>sw101 pc端口状态<br><img src="https://rancho333.github.io/pictures/lab_1.2_pc_101.png"><br>sw102 pc端口状态<br><img src="https://rancho333.github.io/pictures/lab_1.2_pc_102.png"><br>三角拓扑检查两台设备即可确认所有po端口状态</p></li><li><p>配置VTP</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">sw101:</span><br><span class="line">vtp domain CCIE</span><br><span class="line">vtp version 3</span><br><span class="line">vtp password cc1E@fab hidden</span><br><span class="line">vtp mode server MST</span><br><span class="line">vtp primary mst force           &#x2F;&#x2F; 特权模式下强制指定mst primary server, 需要输密码</span><br><span class="line"></span><br><span class="line">sw102&#x2F;sw110:</span><br><span class="line">vtp domain CCIE</span><br><span class="line">vtp version 3</span><br><span class="line">vtp password cc1E@fab hidden</span><br><span class="line">vtp mode client MST                 &#x2F;&#x2F; 注意sw102和sw110的vtp工作在client模式 </span><br></pre></td></tr></table></figure><p>配置完成之后检查vtp状态：<br>sw101的vtp状态如下：<br><img src="https://rancho333.github.io/pictures/lab_1.2_vtp_101.png"><br>密码是hidden的所有看不到明文：<br><img src="https://rancho333.github.io/pictures/lab_1.2_vtp_password_101.png"></p></li></ol><p>sw102的vtp状态如下：<br><img src="https://rancho333.github.io/pictures/lab_1.2_vtp_102.png"></p><ol start="3"><li>配置mst<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">sw101： </span><br><span class="line">spanning-tree mode mst              指定spanning tree模式为mst</span><br><span class="line">spanning-tree mst configuration</span><br><span class="line">    name CCIE</span><br><span class="line">    revision 1</span><br><span class="line">    instance 1 vlan 1001-2000</span><br><span class="line">    instance 2 vlan 2001-4094       &#x2F;&#x2F; mst的具体配置只需要在sw101上配置，之后会通过vtp同步给sw102和sw110</span><br><span class="line">spanning-tree mst 0-1 root primary      &#x2F;&#x2F; 指定sw101是instance 0-1的根</span><br><span class="line"></span><br><span class="line">sw102：</span><br><span class="line">spanning-tree mode mst              </span><br><span class="line">spanning-tree mst 2 root primary        &#x2F;&#x2F; 指定sw102是instance 2的根</span><br><span class="line"></span><br><span class="line">sw103:</span><br><span class="line">spaaning-tree mode mst</span><br></pre></td></tr></table></figure>配置完成之后检查mst状态，sw101作为instance 0-1根桥，sw102作为instance 2的根桥<br>sw101 spt状态<br><img src="https://rancho333.github.io/pictures/lab_1.2_spt_101.png"><br>sw102 spt状态<br><img src="https://rancho333.github.io/pictures/lab_1.2_spt_102.png"></li></ol>]]></content:encoded>
      
      
      
      <category domain="https://rancho333.github.io/tags/CCIE/">CCIE</category>
      
      
      <comments>https://rancho333.github.io/2023/06/19/lab%E8%80%83%E8%AF%95%E5%9F%BA%E6%9C%AC%E4%BB%8B%E7%BB%8D%E5%8F%8A%E8%80%83%E9%A2%98%E5%88%86%E6%9E%90/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Questone2A_snake_traffic_test</title>
      <link>https://rancho333.github.io/2023/04/03/Questone2A_snake_traffic_test/</link>
      <guid>https://rancho333.github.io/2023/04/03/Questone2A_snake_traffic_test/</guid>
      <pubDate>Mon, 03 Apr 2023 01:00:38 GMT</pubDate>
      
      <description>&lt;h1 id=&quot;environment-description&quot;&gt;&lt;a href=&quot;#environment-description&quot; class=&quot;headerlink&quot; title=&quot;environment description&quot;&gt;&lt;/a&gt;environment description&lt;/h1&gt;&lt;p&gt;The experimental topology is shown in the figure:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://rancho333.github.io/pictures/questone2a_100G_snake_traffic_topology.png&quot;&gt;&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<h1 id="environment-description"><a href="#environment-description" class="headerlink" title="environment description"></a>environment description</h1><p>The experimental topology is shown in the figure:</p><p><img src="https://rancho333.github.io/pictures/questone2a_100G_snake_traffic_topology.png"></p><span id="more"></span><p>After the line is connected, do some configuration on ixia to make the port up. On sonic, link training and auto negotiation are disabled by default, and FEC is enabled. Set the corresponding interface on ixia to match it.</p><p>Make sure the port is up:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">root@sonic:&#x2F;home&#x2F;admin# show interfaces status Ethernet49-56</span><br><span class="line">  Interface        Lanes    Speed    MTU    FEC    Alias    Vlan    Oper    Admin             Type    Asym PFC</span><br><span class="line">-----------  -----------  -------  -----  -----  -------  ------  ------  -------  ---------------  ----------</span><br><span class="line"> Ethernet49  41,42,43,44     100G   9100     rs   100GE1  routed      up       up  QSFP28 or later         N&#x2F;A</span><br><span class="line"> Ethernet50  45,46,47,48     100G   9100     rs   100GE2  routed      up       up  QSFP28 or later         N&#x2F;A</span><br><span class="line"> Ethernet51  73,74,75,76     100G   9100     rs   100GE3  routed      up       up          Unknown         N&#x2F;A</span><br><span class="line"> Ethernet52  77,78,79,80     100G   9100     rs   100GE4  routed      up       up  QSFP28 or later         N&#x2F;A</span><br><span class="line"> Ethernet53      1,2,3,4     100G   9100     rs   100GE5  routed      up       up  QSFP28 or later         N&#x2F;A</span><br><span class="line"> Ethernet54  21,22,23,24     100G   9100     rs   100GE6  routed      up       up  QSFP28 or later         N&#x2F;A</span><br><span class="line"> Ethernet55     5,6,7,8,     100G   9100     rs   100GE7  routed      up       up  QSFP28 or later         N&#x2F;A</span><br><span class="line"> Ethernet56  25,26,27,28     100G   9100     rs   100GE8  routed      up       up  QSFP28 or later         N&#x2F;A</span><br></pre></td></tr></table></figure><h1 id="snake-traffic-test-for-100G"><a href="#snake-traffic-test-for-100G" class="headerlink" title="snake traffic test for 100G"></a>snake traffic test for 100G</h1><p>The ixia eth7 port sends out Layer 2 packets, the two sonic ports are in the same vlan, and the ixia eth8 port receives packets for statistics to check whether packets are lost. Similarly, eth8 sends packets, and eth7 receives packets. In this way, the bidirectional Layer 2 wire-speed streaming test is realized. The detailed steps are as follows:</p><p>sonic configuration:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">drivshell&gt;vlan clear</span><br><span class="line">vlan clear</span><br><span class="line">drivshell&gt;vlan remove 1 pbm&#x3D;ce</span><br><span class="line">vlan remove 1 pbm&#x3D;ce</span><br><span class="line">drivshell&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">drivshell&gt;vlan create 100 pbm&#x3D;ce1,ce2 ubm&#x3D;ce1,ce2; pvlan set ce1,ce2 100</span><br><span class="line">vlan create 101 pbm&#x3D;ce3,ce4 ubm&#x3D;ce3,ce4; pvlan set ce3,ce4 101</span><br><span class="line">vlan create 102 pbm&#x3D;ce5,ce7 ubm&#x3D;ce5,ce7; pvlan set ce5,ce7 102</span><br><span class="line">vlan create 100 pbm&#x3D;ce1,ce2 ubm&#x3D;ce1,ce2; pvlan set ce1,ce2 100</span><br><span class="line">vlan create 102 pbm&#x3D;ce5,ce7 ubm&#x3D;ce5,ce7; pvlan set ce5,ce7 102</span><br><span class="line">vlan create 103 pbm&#x3D;ce0,ce6 ubm&#x3D;ce0,ce6; pvlan set ce0,ce6 103</span><br><span class="line">drivshell&gt;vlan create 101 pbm&#x3D;ce3,ce4 ubm&#x3D;ce3,ce4; pvlan set ce3,ce4 101</span><br><span class="line">drivshell&gt;vlan create 102 pbm&#x3D;ce5,ce7 ubm&#x3D;ce5,ce7; pvlan set ce5,ce7 102</span><br><span class="line">drivshell&gt;vlan create 103 pbm&#x3D;ce0,ce6 ubm&#x3D;ce0,ce6; pvlan set ce0,ce6 103</span><br><span class="line">drivshell&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">drivshell&gt;vlan show</span><br><span class="line">vlan show</span><br><span class="line">vlan 1ports none (0x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000), untagged none (0x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000) MCAST_FLOOD_UNKNOWN</span><br><span class="line">vlan 100ports ce1-ce2 (0x000000000000000000000000000000000000000000000000000000000000000000000000000000000800000400000000), untagged ce1-ce2 (0x000000000000000000000000000000000000000000000000000000000000000000000000000000000800000400000000) MCAST_FLOOD_UNKNOWN</span><br><span class="line">vlan 101ports ce3-ce4 (0x000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000002), untagged ce3-ce4 (0x000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000002) MCAST_FLOOD_UNKNOWN</span><br><span class="line">vlan 102ports ce5,ce7 (0x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000018000), untagged ce5,ce7 (0x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000018000) MCAST_FLOOD_UNKNOWN</span><br><span class="line">vlan 103ports ce0,ce6 (0x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000200000004), untagged ce0,ce6 (0x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000200000004) MCAST_FLOOD_UNKNOWN</span><br><span class="line">drivshell&gt;</span><br></pre></td></tr></table></figure><p>Then create two Layer 2 stream:<br><img src="https://rancho333.github.io/pictures/questone2a_100G_snake_traffic_traffic.png"></p><p>The picture shows eth7 sending and eth8 receiving and checking. Similarly, reverse flow is created to realize bidirectional streaming test. Note that it is better to modify the source and destination MAC addresses of Layer 2 packets.</p><p>Final streaming test:<br><img src="https://rancho333.github.io/pictures/questone2a_snake_traffic_100G_result.png"></p><p>As you can see， no packet loss.</p><p>Check the packets counters in Bcmsh.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">drivshell&gt;show c CLMIB_RPOK.ce</span><br><span class="line">show c CLMIB_RPOK.ce</span><br><span class="line">CLMIB_RPOK.ce0    :     23,803,850,505    +13       1&#x2F;s</span><br><span class="line">CLMIB_RPOK.ce1    :     30,512,888,521    +13       1&#x2F;s</span><br><span class="line">CLMIB_RPOK.ce2    :     23,803,849,548     +8</span><br><span class="line">CLMIB_RPOK.ce3    :     30,512,889,476     +8</span><br><span class="line">CLMIB_RPOK.ce4    :     23,803,848,543    +11       1&#x2F;s</span><br><span class="line">CLMIB_RPOK.ce5    :     30,512,890,437    +11       1&#x2F;s</span><br><span class="line">drivshell&gt;show c CLMIB_RFCS</span><br><span class="line">show c CLMIB_RFCS</span><br><span class="line">drivshell&gt;</span><br></pre></td></tr></table></figure><h1 id="snake-traffic-test-for-25G"><a href="#snake-traffic-test-for-25G" class="headerlink" title="snake traffic test for 25G"></a>snake traffic test for 25G</h1><p>Ixia don’t have 25G ports, so i use 100G of ixia connet to 100G port of Questone2A and just send 25% line rate to test 25G port of Questone2A. The test environment tpology is show as below picture.<br><img src="https://rancho333.github.io/pictures/questone2a_snake_traffic_25G_topology.png"></p><p>sonic configuration:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line">drivshell&gt;vlan clear</span><br><span class="line">vlan clear</span><br><span class="line">drivshell&gt;vlan remove 1 pbm&#x3D;ce</span><br><span class="line">vlan remove 1 pbm&#x3D;ce</span><br><span class="line">drivshell&gt;vlan remove 1 pbm&#x3D;xe</span><br><span class="line">vlan remove 1 pbm&#x3D;xe</span><br><span class="line"></span><br><span class="line">drivshell&gt;vlan create 100 pbm&#x3D;xe1,xe2 ubm&#x3D;xe1,xe2; pvlan set xe1,xe2 100</span><br><span class="line">23,xe24; pvlan set xe23,xe24 111</span><br><span class="line">vlan create 112 pbm&#x3D;xe25,xe26 ubm&#x3D;xe25,xe26; pvlan set xe25,xe26 112</span><br><span class="line">vlan create 113 pbm&#x3D;xe27,xe28 ubm&#x3D;xe27,xe28; pvlan set xe27,xe28 113</span><br><span class="line">vlan create 114 pbm&#x3D;xe29,xe30 ubm&#x3D;xe29,xe30; pvlan set xe29,xe30 114</span><br><span class="line">pbm&#x3D;xe31,xe32 ubm&#x3D;xe31,xe32; pvlan set xe31,xe32 115</span><br><span class="line">vlan create 116 pbm&#x3D;xe33,xe34 ubm&#x3D;xe33,xe34; pvlan set xe33,xe34 116</span><br><span class="line">vlan create 117 pbm&#x3D;xe35,xe36 ubm&#x3D;xe35,xe36; pvlan set xe35,xe36 117</span><br><span class="line">vlan create 118 pbm&#x3D;xe37,xe38 ubm&#x3D;xe37,xe38; pvlan set xe37,xe38 vlan create 101 pbm&#x3D;xe3,xe4 ubm&#x3D;xe3,xe4; pvlan set xe3,xe4 101</span><br><span class="line">vlan create 102 pbm&#x3D;xe5,xe6 ubm&#x3D;xe5,xe6; pvlan set xe5,xe6 102</span><br><span class="line">vlan create 100 pbm&#x3D;xe1,xe2 ubm&#x3D;xe1,xe2; pvlan set xe1,xe2 100</span><br><span class="line">vlan create 101 pbm&#x3D;xe3,xe4 ubm&#x3D;xe3,xe4; pvlan set xe3,xe4 101</span><br><span class="line">vlan create 102 pbm&#x3D;xe5,xe6 ubm&#x3D;xe5,xe6; pvlan set xe5,xe6 102</span><br><span class="line">vlan create 103 pbm&#x3D;xe7,xe8 ubm&#x3D;xe7,xe8; pvlan set xe7,xe8 103</span><br><span class="line">drivshell&gt;vlan create 101 pbm&#x3D;xe3,xevlan create 104 pbm&#x3D;xe9,xe10 ubm&#x3D;xe9,xe10; pvlan set xe9,xe10 104</span><br><span class="line">4 ubm&#x3D;xe3,xe4; pvlan set xe3,xe4 101</span><br><span class="line">vlan create 104 pbm&#x3D;xe9,xe10 ubm&#x3D;xe9,xe10; pvlan set xe9,xe10 104</span><br><span class="line">vlan create 105 pbm&#x3D;xe11,xe12 ubm&#x3D;xe11,xe12; pvlan set xe11,xe12 105</span><br><span class="line">vlan create 106 pbm&#x3D;xe13,xe14 ubm&#x3D;xe13,xe14; pvlan set xe13,xe14 106</span><br><span class="line">vlan create 105 pbm&#x3D;xe11,xe12 ubm&#x3D;xe11,xe12; pvlan set xe11,xe12 105</span><br><span class="line">drivshell&gt;vlan create 102vlan create 107 pbm&#x3D;xe15,xe16 ubm&#x3D;xe15,xe16; pvlan set xe15,xe16 107</span><br><span class="line"> pbm&#x3D;xe5,xe6 ubm&#x3D;xe5,xe6; pvlan set vlan create 108 pbm&#x3D;xe17,xe18 ubm&#x3D;xe17,xe18; pvlan set xe17,xe18 108</span><br><span class="line">vlan create 109 pbm&#x3D;xe19,xe20 ubm&#x3D;xe19,xe20; pvlan set xe19,xe20 109</span><br><span class="line">xe5,xe6 102</span><br><span class="line">vlan create 108 pbm&#x3D;xe17,xe18 ubm&#x3D;xe17,xe18; pvlan set xe17,xe18 108</span><br><span class="line">drivshell&gt;vlan create 103 pbm&#x3D;xe7,xe8 ubm&#x3D;xe7,xe8; pvlan set xe7,xe8 103</span><br><span class="line">vlan create 109 pbm&#x3D;xe19,xe20 ubm&#x3D;xe19,xe20; pvlan set xe19,xe20 109</span><br><span class="line">vlan create 110 pbm&#x3D;xe21,xe22 ubm&#x3D;xe21,xe22; pvlan set xe21,xe22 110</span><br><span class="line">vlan create 111 pbm&#x3D;xe23,xe24 ubm&#x3D;xe23,xe24; pvlan set xe23,xe24 111</span><br><span class="line">vlan create 110 pbm&#x3D;xe21,xe22 ubm&#x3D;xe21,xe22; pvlan set xe21,xe22 110</span><br><span class="line">vlan create 111 pbm&#x3D;xe23,xe24 ubm&#x3D;xe23,xe24; pvlan set xe23,xe24 111</span><br><span class="line">vlan create 112 pbm&#x3D;xe25,xe26 ubm&#x3D;xe25,xe26; pvlan set xe25,xe26 112</span><br><span class="line">vlan create 113 pbm&#x3D;xe27,xe28 ubm&#x3D;xe27,xe28; pvlan set xe27,xe28 113</span><br><span class="line">drivshell&gt;vlan create 104 pbm&#x3D;xe9,xe10 ubm&#x3D;xe9,xe10; pvlan set xe9,xe10 104</span><br><span class="line">vlan create 112 pbm&#x3D;xe25,xe26 ubm&#x3D;xe25,xe26; pvlan set xe25,xe26 112</span><br><span class="line">drivshell&gt;vlan create 105 pbm&#x3D;xe11,xe12 ubm&#x3D;xe11,xe12; pvlan set xe11,xe12 105</span><br><span class="line">vlan create 113 pbm&#x3D;xe27,xe28 ubm&#x3D;xe27,xe28; pvlan set xe27,xe28 113</span><br><span class="line">vlan create 114 pbm&#x3D;xe29,xe30 ubm&#x3D;xe29,xe30; pvlan set xe29,xe30 114</span><br><span class="line">vlan create 115 pbm&#x3D;xe31,xe32 ubm&#x3D;xe31,xe32; pvlan set xe31,xe32 115</span><br><span class="line">vlan create 114 pbm&#x3D;xe29,xe30 ubm&#x3D;xe29,xe30; pvlan set xe29,xe30 114</span><br><span class="line">vlan create 115 pbm&#x3D;xe31,xe32 ubm&#x3D;xe31,xe32; pvlan set xe31,xe32 115</span><br><span class="line">vlan create 116 pbm&#x3D;xe33,xe34 ubm&#x3D;xe33,xe34; pvlan set xe33,xe34 116</span><br><span class="line">vlan create 117 pbm&#x3D;xe35,xe36 ubm&#x3D;xe35,xe36; pvlan set xe35,xe36 117</span><br><span class="line">vlan create 116 pbm&#x3D;xe33,xe34 ubm&#x3D;xe33,xe34; pvlan set xe33,xe34 116</span><br><span class="line">vlan create 117 pbm&#x3D;xe35,xe36 ubm&#x3D;xe35,xe36; pvlan set xe35,xe36 117</span><br><span class="line">vlan create 118 pbm&#x3D;xe37,xe38 ubm&#x3D;xe37,xe38; pvlan set xe37,xe38 118</span><br><span class="line">vlan create 119 pbm&#x3D;xe39,xe40 ubm&#x3D;xe39,xe40; pvlan set xe39,xe40 119</span><br><span class="line">vlan create 118 pbm&#x3D;xe37,xe38 ubm&#x3D;xe37,xe38; pvlan set xe37,xe38 118</span><br><span class="line">drivshell&gt;vlan create 106 pbm&#x3D;xe13,xe14 ubm&#x3D;xe13,xe14; pvlan set xe13,xe14 106</span><br><span class="line">vlan create 119 pbm&#x3D;xe39,xe40 ubm&#x3D;xe39,xe40; pvlan set xe39,xe40 119</span><br><span class="line">vlan create 120 pbm&#x3D;xe41,xe42 ubm&#x3D;xe41,xe42; pvlan set xe41,xe42 120</span><br><span class="line">vlan create 121 pbm&#x3D;xe43,xe44 ubm&#x3D;xe43,xe44; pvlan set xe43,xe44 121</span><br><span class="line">vlan create 120 pbm&#x3D;xe41,xe42 ubm&#x3D;xe41,xe42; pvlan set xe41,xe42 120</span><br><span class="line">drivshell&gt;vlan vlan create 122 pbm&#x3D;xe45,xe46 ubm&#x3D;xe45,xe46; pvlan set xe45,xe46 122</span><br><span class="line">create 107 pbm&#x3D;xe15,xe16 ubm&#x3D;xe15,xe16; pvlan set xe15,xe16 107</span><br><span class="line">drivshell&gt;vlan create 108 pbm&#x3D;xe17,xe18 ubm&#x3D;xe17,xe18; pvlan set xe17,xe18 108</span><br><span class="line">drivshell&gt;vlan create 109 pbm&#x3D;xe19,xe20 ubm&#x3D;xe19,xe20; pvlan set xe19,xe20 109</span><br><span class="line">vlan create 122 pbm&#x3D;xe45,xe46 ubm&#x3D;xe45,xe46; pvlan set xe45,xe46 122</span><br><span class="line">vlan create 123 pbm&#x3D;ce6,xe0 ubm&#x3D;ce6,xe0; pvlan set ce6,xe0 123</span><br><span class="line">vlan create 124 pbm&#x3D;ce7,xe47 ubm&#x3D;ce7,xe47; pvlan set ce7,xe47 124</span><br><span class="line">vlan create 123 pbm&#x3D;ce6,xe0 ubm&#x3D;ce6,xe0; pvlan set ce6,xe0 123</span><br><span class="line">drivshell&gt;vlan create 110 pbm&#x3D;xe21,xe22 ubm&#x3D;xe21,xe22; pvlan set xe21,xe22 110</span><br><span class="line">drivshell&gt;vlan create 111 pbm&#x3D;xe23,xe24 ubm&#x3D;xe23,xe24; pvlan set xe23,xe24 111</span><br><span class="line">drivshell&gt;vlan create 112 pbm&#x3D;xe25,xe26 ubm&#x3D;xe25,xe26; pvlan set xe25,xe26 112</span><br><span class="line">drivshell&gt;vlan create 113 pbm&#x3D;xe27,xe28 ubm&#x3D;xe27,xe28; pvlan set xe27,xe28 113</span><br><span class="line">drivshell&gt;vlan create 114 pbm&#x3D;xe29,xe30 ubm&#x3D;xe29,xe30; pvlan set xe29,xe30 114</span><br><span class="line">drivshell&gt;vlan create 115 pbm&#x3D;xe31,xe32 ubm&#x3D;xe31,xe32; pvlan set xe31,xe32 115</span><br><span class="line">drivshell&gt;vlan create 116 pbm&#x3D;xe33,xe34 ubm&#x3D;xe33,xe34; pvlan set xe33,xe34 116</span><br><span class="line">drivshell&gt;vlan create 117 pbm&#x3D;xe35,xe36 ubm&#x3D;xe35,xe36; pvlan set xe35,xe36 117</span><br><span class="line">drivshell&gt;vlan create 118 pbm&#x3D;xe37,xe38 ubm&#x3D;xe37,xe38; pvlan set xe37,xe38 118</span><br><span class="line">drivshell&gt;vlan create 119 pbm&#x3D;xe39,xe40 ubm&#x3D;xe39,xe40; pvlan set xe39,xe40 119</span><br><span class="line">drivshell&gt;vlan create 120 pbm&#x3D;xe41,xe42 ubm&#x3D;xe41,xe42; pvlan set xe41,xe42 120</span><br><span class="line">drivshell&gt;vlan create 121 pbm&#x3D;xe43,xe44 ubm&#x3D;xe43,xe44; pvlan set xe43,xe44 121</span><br><span class="line">drivshell&gt;vlan create 122 pbm&#x3D;xe45,xe46 ubm&#x3D;xe45,xe46; pvlan set xe45,xe46 122</span><br><span class="line">drivshell&gt;vlan create 123 pbm&#x3D;ce6,xe0 ubm&#x3D;ce6,xe0; pvlan set ce6,xe0 123</span><br><span class="line">drivshell&gt;vlan create 124 pbm&#x3D;ce7,xe47 ubm&#x3D;ce7,xe47; pvlan set ce7,xe47 124</span><br><span class="line">drivshell&gt;</span><br></pre></td></tr></table></figure><p>ixia is configured as follows:<br><img src="https://rancho333.github.io/pictures/questone2a_snake_traffic_25G_ixia.png"></p><p>Finally, start the test to check the packet loss:<br><img src="https://rancho333.github.io/pictures/questone2a_snake_traffic_25G_result.png"></p><p>Check the packets counters in Bcmsh.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line">drivshell&gt;show c CLMIB_TPKT.xe</span><br><span class="line">show c CLMIB_TPKT.xe</span><br><span class="line">CLMIB_TPKT.xe0    :      1,347,751,223     +6</span><br><span class="line">CLMIB_TPKT.xe1    :      1,347,716,171   +154       8&#x2F;s</span><br><span class="line">CLMIB_TPKT.xe2    :      1,347,683,168    +12</span><br><span class="line">CLMIB_TPKT.xe3    :      1,347,660,881   +148       8&#x2F;s</span><br><span class="line">CLMIB_TPKT.xe4    :      1,347,633,886    +18</span><br><span class="line">CLMIB_TPKT.xe5    :      1,347,611,124   +142       8&#x2F;s</span><br><span class="line">CLMIB_TPKT.xe6    :      1,347,585,268    +24</span><br><span class="line">CLMIB_TPKT.xe7    :      1,347,562,390   +136       8&#x2F;s</span><br><span class="line">CLMIB_TPKT.xe8    :      1,347,536,351    +30</span><br><span class="line">CLMIB_TPKT.xe9    :      1,347,513,095   +130       8&#x2F;s</span><br><span class="line">CLMIB_TPKT.xe10     :      1,347,486,710    +38       1&#x2F;s</span><br><span class="line">CLMIB_TPKT.xe11     :      1,347,463,552   +125       8&#x2F;s</span><br><span class="line">CLMIB_TPKT.xe12     :      1,347,389,466    +45       2&#x2F;s</span><br><span class="line">CLMIB_TPKT.xe13     :      1,347,366,188   +118       7&#x2F;s</span><br><span class="line">CLMIB_TPKT.xe14     :      1,347,341,022    +50       2&#x2F;s</span><br><span class="line">CLMIB_TPKT.xe15     :      1,347,317,516   +109       5&#x2F;s</span><br><span class="line">CLMIB_TPKT.xe16     :      1,347,292,618    +57       3&#x2F;s</span><br><span class="line">CLMIB_TPKT.xe17     :      1,347,269,117   +102       4&#x2F;s</span><br><span class="line">CLMIB_TPKT.xe18     :      1,347,243,912    +64       3&#x2F;s</span><br><span class="line">CLMIB_TPKT.xe19     :      1,347,215,748    +95       3&#x2F;s</span><br><span class="line">CLMIB_TPKT.xe20     :      1,347,191,194    +69       3&#x2F;s</span><br><span class="line">CLMIB_TPKT.xe21     :      1,347,166,549    +88       3&#x2F;s</span><br><span class="line">CLMIB_TPKT.xe22     :      1,347,141,524    +78       4&#x2F;s</span><br><span class="line">CLMIB_TPKT.xe23     :      1,347,116,886    +83       3&#x2F;s</span><br><span class="line">CLMIB_TPKT.xe24     :      1,348,186,469    +83       4&#x2F;s</span><br><span class="line">CLMIB_TPKT.xe25     :      1,348,161,948    +74       1&#x2F;s</span><br><span class="line">CLMIB_TPKT.xe26     :      1,348,136,316    +90       4&#x2F;s</span><br><span class="line">CLMIB_TPKT.xe27     :      1,348,106,807    +69       1&#x2F;s</span><br><span class="line">CLMIB_TPKT.xe28     :      1,348,079,919    +95       4&#x2F;s</span><br><span class="line">CLMIB_TPKT.xe29     :      1,348,048,460    +62       1&#x2F;s</span><br><span class="line">CLMIB_TPKT.xe30     :      1,348,018,298   +102       4&#x2F;s</span><br><span class="line">CLMIB_TPKT.xe31     :      1,347,983,062    +57       1&#x2F;s</span><br><span class="line">CLMIB_TPKT.xe32     :      1,347,951,303   +107       4&#x2F;s</span><br><span class="line">CLMIB_TPKT.xe33     :      1,347,917,231    +50       1&#x2F;s</span><br><span class="line">CLMIB_TPKT.xe34     :      1,347,886,358   +116       5&#x2F;s</span><br><span class="line">CLMIB_TPKT.xe35     :      1,347,853,385    +45       1&#x2F;s</span><br><span class="line">CLMIB_TPKT.xe36     :      1,347,092,884   +121       5&#x2F;s</span><br><span class="line">CLMIB_TPKT.xe37     :      1,347,067,278    +38       1&#x2F;s</span><br><span class="line">CLMIB_TPKT.xe38     :      1,347,043,968   +127       5&#x2F;s</span><br><span class="line">CLMIB_TPKT.xe39     :      1,347,017,351    +32       1&#x2F;s</span><br><span class="line">CLMIB_TPKT.xe40     :      1,346,994,279   +135       6&#x2F;s</span><br><span class="line">CLMIB_TPKT.xe41     :      1,346,968,532    +26       1&#x2F;s</span><br><span class="line">CLMIB_TPKT.xe42     :      1,346,946,104   +142       6&#x2F;s</span><br><span class="line">CLMIB_TPKT.xe43     :      1,346,917,004    +19</span><br><span class="line">CLMIB_TPKT.xe44     :      1,346,894,475   +148       7&#x2F;s</span><br><span class="line">CLMIB_TPKT.xe45     :      1,346,866,979    +12</span><br><span class="line">CLMIB_TPKT.xe46     :      1,346,843,674   +154       7&#x2F;s</span><br><span class="line">CLMIB_TPKT.xe47     :      1,346,816,974     +6</span><br><span class="line">drivshell&gt;</span><br><span class="line">drivshell&gt;show c CLMIB_RFCS</span><br><span class="line">show c CLMIB_RFCS</span><br><span class="line">drivshell&gt;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      
      
      
      <comments>https://rancho333.github.io/2023/04/03/Questone2A_snake_traffic_test/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Questone2A_25G_line_rate_test</title>
      <link>https://rancho333.github.io/2023/03/27/Questone2A_25G_line_rate_test/</link>
      <guid>https://rancho333.github.io/2023/03/27/Questone2A_25G_line_rate_test/</guid>
      <pubDate>Mon, 27 Mar 2023 01:00:38 GMT</pubDate>
      
      <description>&lt;h1 id=&quot;environment-description&quot;&gt;&lt;a href=&quot;#environment-description&quot; class=&quot;headerlink&quot; title=&quot;environment description&quot;&gt;&lt;/a&gt;environment description&lt;/h1&gt;&lt;p&gt;The experimental topology is shown in the figure:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://rancho333.github.io/pictures/questone2a_25G_topology.png&quot;&gt;&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<h1 id="environment-description"><a href="#environment-description" class="headerlink" title="environment description"></a>environment description</h1><p>The experimental topology is shown in the figure:</p><p><img src="https://rancho333.github.io/pictures/questone2a_25G_topology.png"></p><span id="more"></span><p>We only need add one ixia 100G port to topology, and set the line rate of 25 percent to test Questone2A 25G ports.<br><img src="https://rancho333.github.io/pictures/questone2a_25G_ixia_topology.png"></p><p>For Questone2A, follow the below cmds to set up test enviorments.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">vlan clear              </span><br><span class="line">vlan remove 1 pbm&#x3D;ce       </span><br><span class="line">vlan remove 1 pbm&#x3D;xe </span><br><span class="line"></span><br><span class="line">vlan create 103 pbm&#x3D;xe0,ce0 ubm&#x3D;xe0,ce0; pvlan set xe0,ce0 103</span><br><span class="line">vlan create 100 pbm&#x3D;xe1,xe2 ubm&#x3D;xe1,xe2; pvlan set xe1,xe2 100</span><br><span class="line">vlan create 101 pbm&#x3D;xe3,xe4 ubm&#x3D;xe3,xe4; pvlan set xe3,xe4 101</span><br><span class="line">vlan create 102 pbm&#x3D;xe5,xe6 ubm&#x3D;xe5,xe6; pvlan set xe5,xe6 102</span><br><span class="line">vlan create 104 pbm&#x3D;xe7,ce0 ubm&#x3D;xe7,ce0; pvlan set xe7,ce0 104</span><br></pre></td></tr></table></figure><p>We test three different(20,25,30) line rate speed, and expect no packets loss when line rate under 25 percent.</p><p>We use default preemphasis and differnet FEC setting to test line rate of 25G port.</p><h2 id="FEC-fc"><a href="#FEC-fc" class="headerlink" title="FEC fc"></a>FEC fc</h2><p>For fec mode of fc，ports status show as below picture.<br><img src="https://rancho333.github.io/pictures/questone2a_25g_fec_fc.png"></p><h3 id="Line-rate-20-percent"><a href="#Line-rate-20-percent" class="headerlink" title="Line rate 20 percent"></a>Line rate 20 percent</h3><p>Just set line rate 20 percent on ixia like below picture.<br><img src="https://rancho333.github.io/pictures/questone2a_line_rate_20.png"></p><p>Test results show as below picture and meet expectations.<br><img src="https://rancho333.github.io/pictures/questone2a_line_rate_20_result.png"></p><h3 id="Line-rate-25-percent"><a href="#Line-rate-25-percent" class="headerlink" title="Line rate 25 percent"></a>Line rate 25 percent</h3><p>Test results show as below picture and meet expectations.<br><img src="https://rancho333.github.io/pictures/questone2a_line_rate_25.png"></p><h3 id="Line-rate-30-percent"><a href="#Line-rate-30-percent" class="headerlink" title="Line rate 30 percent"></a>Line rate 30 percent</h3><p>Test results show as below picture and packets loss.<br><img src="https://rancho333.github.io/pictures/questone2a_line_rate_30.png"></p><h2 id="Fec-none"><a href="#Fec-none" class="headerlink" title="Fec none"></a>Fec none</h2><p>For fec mode of none, ports status show as below picture.<br><img src="https://rancho333.github.io/pictures/questone2a_25_fec_none.png"></p><h3 id="Line-rate-20-percent-1"><a href="#Line-rate-20-percent-1" class="headerlink" title="Line rate 20 percent"></a>Line rate 20 percent</h3><p>For fec mode of none, ports status show as below picture.<br><img src="https://rancho333.github.io/pictures/questone2a_line_rate_20_none.png"></p><h3 id="Line-rate-25-percent-1"><a href="#Line-rate-25-percent-1" class="headerlink" title="Line rate 25 percent"></a>Line rate 25 percent</h3><p>For fec mode of none, ports status show as below picture.<br><img src="https://rancho333.github.io/pictures/questone2a_line_rate_25_none.png"></p><h3 id="Line-rate-30-percent-1"><a href="#Line-rate-30-percent-1" class="headerlink" title="Line rate 30 percent"></a>Line rate 30 percent</h3><p>Test results show as below picture and packets loss.<br><img src="https://rancho333.github.io/pictures/questone2a_line_rate_30_none.png"></p>]]></content:encoded>
      
      
      
      
      <comments>https://rancho333.github.io/2023/03/27/Questone2A_25G_line_rate_test/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>vrf lite route leaking</title>
      <link>https://rancho333.github.io/2022/10/13/vrf-lite-route-leaking/</link>
      <guid>https://rancho333.github.io/2022/10/13/vrf-lite-route-leaking/</guid>
      <pubDate>Thu, 13 Oct 2022 08:07:22 GMT</pubDate>
      
      <description>&lt;h1 id=&quot;写在前面&quot;&gt;&lt;a href=&quot;#写在前面&quot; class=&quot;headerlink&quot; title=&quot;写在前面&quot;&gt;&lt;/a&gt;写在前面&lt;/h1&gt;&lt;p&gt;之前在&lt;a href=&quot;https://rancho333.github.io/2021/10/20/vrf%E7%AE%80%E8%BF%B0%E5%8F%8A%E4%BB%BF%E7%9C%9F%E5%AE%9E%E9%AA%8C/&quot;&gt;vrf简述及仿真实验&lt;/a&gt;对vrf有了一个基本的了解，但是vrf lite route leaking实验失败了。现在补做回来。&lt;/p&gt;
&lt;p&gt;vrf之间的路由泄漏有静态配置和MP-BGP两种方式，本文只做静态配置的实验。&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<h1 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h1><p>之前在<a href="https://rancho333.github.io/2021/10/20/vrf%E7%AE%80%E8%BF%B0%E5%8F%8A%E4%BB%BF%E7%9C%9F%E5%AE%9E%E9%AA%8C/">vrf简述及仿真实验</a>对vrf有了一个基本的了解，但是vrf lite route leaking实验失败了。现在补做回来。</p><p>vrf之间的路由泄漏有静态配置和MP-BGP两种方式，本文只做静态配置的实验。</p><span id="more"></span><h1 id="实验"><a href="#实验" class="headerlink" title="实验"></a>实验</h1><p>之前的实验时是由于配置出的问题，参考cisco的<a href="https://www.cisco.com/c/en/us/support/docs/multiprotocol-label-switching-mpls/multiprotocol-label-switching-vpns-mpls-vpns/47807-routeleaking.html#diffvrfs">Route Leaking in MPLS/VPN Networks</a>, 两个vrf之间不能直接泄露路由，必须从global中转一下才行。</p><p>实验拓扑如下图所示：<br><img src="https://rancho333.github.io/pictures/vrf_leaking_topology.png"></p><p>vpc2属于vrf 2, vpc3属于vrf 3, vpc4属于global. 通过配置使三者之间可以相互通信。<br>对于vrf -&gt; global，在vrf中写到达global中prefix路由，在global中写到达vrf中prefix的路由。<br>对于vrf -&gt; vrf，在vrf中写到达另一个vrf中prefix的路由(下一跳在global中)，在global中写到达该prefix的路由，对于另一个vrf，做相同的操作。</p><p>下面开始配置。基本的ip网段配置规则按设备名称来，这里不贴出来。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">R1(config)#ip vrf 2             &#x2F;&#x2F; 创建vrf2</span><br><span class="line">R1(config)#ip vrf 3             &#x2F;&#x2F; 创建vrf3</span><br><span class="line"></span><br><span class="line">R1(config-if)#interface ethernet 0&#x2F;0</span><br><span class="line">R1(config-if)#ip vrf forwarding 2                   &#x2F;&#x2F; 将eth0加入vrf 2</span><br><span class="line">R1(config-if)#ip address 12.1.1.1 255.255.255.0</span><br><span class="line"></span><br><span class="line">R1(config-if)#interface ethernet 0&#x2F;1</span><br><span class="line">R1(config-if)#ip vrf forwarding 3                   &#x2F;&#x2F; 将eth1加入vrf 3</span><br><span class="line">R1(config-if)#ip address 13.1.1.1 255.255.255.0</span><br></pre></td></tr></table></figure><p>测试下基本的联通性：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">vpc4&gt; ping 14.1.1.1 -c 1                &#x2F;&#x2F; 可以ping通自己的网关</span><br><span class="line"></span><br><span class="line">84 bytes from 14.1.1.1 icmp_seq&#x3D;1 ttl&#x3D;255 time&#x3D;0.335 ms</span><br><span class="line"></span><br><span class="line">vpc4&gt; ping 12.1.1.2 -c 1                &#x2F;&#x2F; 不能和vrf 2通信</span><br><span class="line"></span><br><span class="line">*14.1.1.1 icmp_seq&#x3D;1 ttl&#x3D;255 time&#x3D;0.497 ms (ICMP type:3, code:1, Destination host unreachable)</span><br><span class="line"></span><br><span class="line">vpc4&gt; ping 13.1.1.3 -c 1                &#x2F;&#x2F; 不能和vrf 3通信</span><br><span class="line"></span><br><span class="line">*14.1.1.1 icmp_seq&#x3D;1 ttl&#x3D;255 time&#x3D;0.492 ms (ICMP type:3, code:1, Destination host unreachable)</span><br></pre></td></tr></table></figure><p>符合预期。</p><p>对于vrf 2与global之间的通信：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">R1(config)#ip route vrf 2 14.1.1.0 255.255.255.0 14.1.1.4 global            &#x2F;&#x2F; 在vrf 2中添加global中prefix的路由，global关键词表明：如果在vrf 2中收到prefix是14.1.1.0&#x2F;24的报文时，到global路由表中找路由出去，由于14.1.1.0&#x2F;24是global中的直连网段，所以报文可以转发</span><br><span class="line">R1(config)#ip route 12.1.1.0 255.255.255.0 ethernet 0&#x2F;0             &#x2F;&#x2F; global中添加到vrf 2中prefix的路由，注意下一跳需要指定是物理接口，如果指定ip的话，不能正常路由</span><br><span class="line"></span><br><span class="line">vpc4&gt; ping 12.1.1.2 -c 1                &#x2F;&#x2F; vrf 2与global之间三层可达</span><br><span class="line"></span><br><span class="line">84 bytes from 12.1.1.2 icmp_seq&#x3D;1 ttl&#x3D;63 time&#x3D;1.219 ms</span><br></pre></td></tr></table></figure><p>vrf 3与global之间的通信类似配置。<br>对于vrf 2与vrf 3之间的通信：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">R1(config)#ip route vrf 2 13.1.1.0 255.255.255.0 13.1.1.3 global            &#x2F;&#x2F; 在vrf 2中添加vrf 3中prefix的路由，下一跳去global中找</span><br><span class="line">R1(config)#ip route 13.1.1.0 255.255.255.0 ethernet 0&#x2F;1                     &#x2F;&#x2F; global中没有到vrf 3的路由，所以需要在global中添加到vrf 3中prefix的路由</span><br><span class="line"></span><br><span class="line">R1(config)#ip route vrf 3 12.1.1.0 255.255.255.0 12.1.1.2 global            &#x2F;&#x2F; 同理在vrf 3中添加到vrf 2中prefix的路由</span><br><span class="line">R1(config)#ip route 12.1.1.0 255.255.255.0 ethernet 0&#x2F;0        </span><br><span class="line"></span><br><span class="line">vpc2&gt; ping 13.1.1.3 -c 1                    &#x2F;&#x2F; vrf 2与vrf 3之间三层可达</span><br><span class="line"></span><br><span class="line">84 bytes from 13.1.1.3 icmp_seq&#x3D;1 ttl&#x3D;63 time&#x3D;3.980 ms</span><br></pre></td></tr></table></figure><p>由于global中已经有了到vrf 2和vrf 3的路由，所以对于vrf 3访问global，只需要添加一条：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">R1(config)#ip route vrf 3 14.1.1.0 255.255.255.0 14.1.1.4 global</span><br><span class="line"></span><br><span class="line">vpc4&gt; ping 13.1.1.3 -c 1                &#x2F;&#x2F; vrf 3与global之间三层可达</span><br><span class="line"></span><br><span class="line">84 bytes from 13.1.1.3 icmp_seq&#x3D;1 ttl&#x3D;63 time&#x3D;2.165 ms</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这里面的一个基本思路是：如果一个vrf想要访问其它vrf的网段(无论是不是default vrf)</p><ol><li>下一跳都要指定到global中去找，global中如果没有对应的路由，就要在global中补上</li><li>同时global中一定要有返回该vrf的路由</li><li>网络是双向的，来回都需要有路由。</li></ol><p>分析下一下路由表，这是最本质的东西了：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">对于vrf 2的路由表:</span><br><span class="line">R1#show ip route vrf 2 static         </span><br><span class="line">      13.0.0.0&#x2F;24 is subnetted, 1 subnets</span><br><span class="line">S        13.1.1.0 [1&#x2F;0] via 13.1.1.3                    &#x2F;&#x2F; 去往vrf 3的路由，到global中找下一跳13.1.1.3  (路由表中好像并没有什么地方体现出到global去找)</span><br><span class="line">      14.0.0.0&#x2F;24 is subnetted, 1 subnets</span><br><span class="line">S        14.1.1.0 [1&#x2F;0] via 14.1.1.4                    &#x2F;&#x2F; 去往global的路由</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 对于global路由表</span><br><span class="line">R1#show ip route static </span><br><span class="line">      12.0.0.0&#x2F;24 is subnetted, 1 subnets</span><br><span class="line">S        12.1.1.0 is directly connected, Ethernet0&#x2F;0</span><br><span class="line">      13.0.0.0&#x2F;24 is subnetted, 1 subnets</span><br><span class="line">S        13.1.1.0 is directly connected, Ethernet0&#x2F;1    &#x2F;&#x2F; 指明13.1.1.0网段的出口</span><br><span class="line"></span><br><span class="line">R1#show ip route vrf 3 static </span><br><span class="line">      12.0.0.0&#x2F;24 is subnetted, 1 subnets</span><br><span class="line">S        12.1.1.0 [1&#x2F;0] via 12.1.1.2                    &#x2F;&#x2F; 12.1.1.0的回程路由</span><br><span class="line">      14.0.0.0&#x2F;24 is subnetted, 1 subnets</span><br><span class="line">S        14.1.1.0 [1&#x2F;0] via 14.1.1.4                    </span><br><span class="line"></span><br></pre></td></tr></table></figure><p>一张图来收尾吧：<br><img src="https://rancho333.github.io/pictures/vrf_leaking_route.png"></p><p>最后再补充一点，vrf lite leaking有两种方式，一种就是上面使用的通过配置静态路由实现，另外一种方式就是使用MP-BG。对于MP-BGP的方式：</p><ol><li>在vrf中表明需要import的RT</li><li>在MP-BGP对应的vrf中redistribute相关的路由<br>本质就是将不同vrf中的路由导入到MP-BGP中去，然后再import自己感兴趣的其它vrf中的路由，这样就可以实现不同vrf之间的路由leaking.</li></ol>]]></content:encoded>
      
      
      
      <category domain="https://rancho333.github.io/tags/vrf/">vrf</category>
      
      
      <comments>https://rancho333.github.io/2022/10/13/vrf-lite-route-leaking/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>PVLAN浅析</title>
      <link>https://rancho333.github.io/2022/10/12/PVLAN%E6%B5%85%E6%9E%90/</link>
      <guid>https://rancho333.github.io/2022/10/12/PVLAN%E6%B5%85%E6%9E%90/</guid>
      <pubDate>Wed, 12 Oct 2022 02:34:00 GMT</pubDate>
      
      <description>&lt;h1 id=&quot;写在前面&quot;&gt;&lt;a href=&quot;#写在前面&quot; class=&quot;headerlink&quot; title=&quot;写在前面&quot;&gt;&lt;/a&gt;写在前面&lt;/h1&gt;&lt;p&gt;Vlan里面有两个常见的概念：透传与终结。所谓vlan透传就是某个vlan不仅在一台交换机上有效，它还要通过某种方法延伸到别的以太网交换机上，在别的设备上照样有效，vlan透传可以通过802.1Q技术实现。&lt;br&gt;终结的意思相对，某个vlan的有效域不能再延伸到别的设备，或者不能通过某条链路延伸到别的设备。vlan的终结可以使用PVLAN技术。&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<h1 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h1><p>Vlan里面有两个常见的概念：透传与终结。所谓vlan透传就是某个vlan不仅在一台交换机上有效，它还要通过某种方法延伸到别的以太网交换机上，在别的设备上照样有效，vlan透传可以通过802.1Q技术实现。<br>终结的意思相对，某个vlan的有效域不能再延伸到别的设备，或者不能通过某条链路延伸到别的设备。vlan的终结可以使用PVLAN技术。</p><span id="more"></span><p>本文主要浅析下PVLAN的概念以及实验验证下。</p><h1 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h1><p>把vlan终结掉，也就是确定vlan的边界在哪里终止，pvlan技术可以很好的实现这个功能，同时达到节省vlan的目的。cisco的PVLAN意思是private vlan，华为的意思是primary vlan. 不同叫法，基本相同的实现。</p><p>PVLAN中的vlan分成两类：primary vlan和secondary vlan(子vlan)。实现了接入用户二层报文的隔离，同时上层交换机下发的报文可以被每一个用户接收到，简化了配置，节省了vlan资源。</p><p>本文用以下拓扑来实验说明：<br><img src="https://rancho333.github.io/pictures/pvlan_topology.png"></p><p>pvlan中总是会有一个primary vlan，primary vlan中有promiscuous port。所有的端口都能和promiscuous port通信。在primary vlan中可以存在一个或多个secondary vlan，secondary vlan有两种类型：</p><ul><li>community vlan: community vlan中的成员端口可以相互通信，并且可以和promiscuous port通信</li><li>isolated vlan：成员端口之间不能通信，但是可以和promiscuous port通信。</li></ul><p>secondary vlan始终可以和promiscuous port通信，但是不同的secondary vlan之间是相互隔离的。</p><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p>实验拓扑如上所示。做一些简单说明：</p><ul><li>primary vlan的数值是100</li><li>secondary community vlan的数值是101</li><li>secondary isolated vlan的数值是102</li><li>vpc3和vpc4在community vlan中可以相互通信，并且可以和连接到promiscuous port的vpc2通信</li><li>vpc5和vpc6在isolated vlan中只能和vpc2通信</li><li>vpc2可以和所有其它vpc通信</li></ul><p>接下来就是配置了。</p><p>首先创建primary vlan和secondary vlan。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">S(config)#vtp mode off                  &#x2F;&#x2F; 首先关闭vtp，只有vtpv3支持pvlan，干脆关掉免得复杂</span><br><span class="line">Setting device to VTP Off mode for VLANS.</span><br><span class="line"></span><br><span class="line">S(config)#vlan 100              </span><br><span class="line">S(config-vlan)#private-vlan primary             &#x2F;&#x2F; 创建primary vlan</span><br><span class="line">S(config-vlan)#private-vlan association add 101     &#x2F;&#x2F; 与secondary vlan关联</span><br><span class="line">S(config-vlan)#private-vlan association add 102</span><br><span class="line"></span><br><span class="line">S(config)#vlan 101</span><br><span class="line">S(config-vlan)#private-vlan community           &#x2F;&#x2F; 创建secondary community vlan</span><br><span class="line"></span><br><span class="line">S(config)#vlan 102</span><br><span class="line">S(config-vlan)#private-vlan isolated            &#x2F;&#x2F; 创建secondary isolated vlan</span><br></pre></td></tr></table></figure><p>接下来配置接口所属的vlan.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">S(config)#interface range ethernet 0&#x2F;1-2        &#x2F;&#x2F; community vlan所属的两个端口, 属于CV 101</span><br><span class="line">S(config-if-range)#switchport mode private-vlan host    &#x2F;&#x2F; 指明这些端口是主机端口，类似于access port</span><br><span class="line">S(config-if-range)#switchport private-vlan host-association 100 101     &#x2F;&#x2F; 指明端口所属的primary vlan是100，secondary vlan是101</span><br><span class="line"></span><br><span class="line">S(config)#interface ethernet 0&#x2F;0</span><br><span class="line">S(config-if)#switchport mode private-vlan promiscuous           &#x2F;&#x2F; 指明该端口是promiscuous port</span><br><span class="line">S(config-if)#switchport private-vlan mapping 100 101            &#x2F;&#x2F; 将primary vlan与secondary vlan映射</span><br><span class="line"></span><br><span class="line">S(config)#interface ethernet 0&#x2F;3 </span><br><span class="line">S(config)#interface ethernet 1&#x2F;0       </span><br><span class="line">S(config-if)#switchport mode private-vlan host      &#x2F;&#x2F; 配置端口属于secondary isolated vlan</span><br><span class="line">S(config-if)#switchport private-vlan host-association 100 102</span><br></pre></td></tr></table></figure><p>查看下配置的状态：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 对于promiscuous port</span><br><span class="line">S#show interfaces ethernet 0&#x2F;0 switchport | include mapping     </span><br><span class="line">Administrative private-vlan mapping: 100 (VLAN0100) 101 (VLAN0101) 102 (VLAN0102)</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 对于host端口</span><br><span class="line">S#show interfaces ethernet 0&#x2F;1 switchport | include host-association</span><br><span class="line">Administrative private-vlan host-association: 100 (VLAN0100) 101 (VLAN0101) </span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 对于isolated端口</span><br><span class="line">S#show interfaces ethernet 0&#x2F;3 switchport | include host-association</span><br><span class="line">Administrative private-vlan host-association: 100 (VLAN0100) 102 (VLAN0102)</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 查看primary vlan和secondary vlan，以及secondary的类型</span><br><span class="line">S#show vlan private-vlan </span><br><span class="line"></span><br><span class="line">Primary Secondary Type              Ports</span><br><span class="line">------- --------- ----------------- ------------------------------------------</span><br><span class="line">100     101       community         Et0&#x2F;0, Et0&#x2F;1, Et0&#x2F;2</span><br><span class="line">100     102       isolated          Et0&#x2F;3, Et1&#x2F;0</span><br></pre></td></tr></table></figure><p>接下来ping测试一下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 对于community vlan的成员</span><br><span class="line">vpc3&gt; ping  192.168.1.2 -c 1            &#x2F;&#x2F; 可以ping通promiscuous port</span><br><span class="line"></span><br><span class="line">84 bytes from 192.168.1.2 icmp_seq&#x3D;1 ttl&#x3D;64 time&#x3D;1.775 ms</span><br><span class="line"></span><br><span class="line">vpc3&gt; ping  192.168.1.4 -c 1            &#x2F;&#x2F; 可以ping通同secondary community的成员</span><br><span class="line"></span><br><span class="line">84 bytes from 192.168.1.4 icmp_seq&#x3D;1 ttl&#x3D;64 time&#x3D;1.159 ms</span><br><span class="line"></span><br><span class="line">vpc3&gt; ping  192.168.1.5 -c 1        &#x2F;&#x2F; 不能ping通其它secondary vlan的成员</span><br><span class="line"></span><br><span class="line">host (192.168.1.5) not reachable</span><br></pre></td></tr></table></figure><p>vpc2同样可以ping通vpc3和vpc4，这里就不贴出来了。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 对于isolated vlan的成员</span><br><span class="line">vpc5&gt; ping 192.168.1.6 -c 1         &#x2F;&#x2F; 不能ping通同vlan的其它成员</span><br><span class="line"></span><br><span class="line">host (192.168.1.6) not reachable</span><br><span class="line"></span><br><span class="line">vpc5&gt; ping 192.168.1.2 -c 1     &#x2F;&#x2F; 可以ping通promiscuous port</span><br><span class="line"></span><br><span class="line">84 bytes from 192.168.1.2 icmp_seq&#x3D;1 ttl&#x3D;64 time&#x3D;0.815 ms</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; promiscuous port则可以ping通isolated vlan内的所有成员</span><br><span class="line">vpc2&gt; ping 192.168.1.5 -c 1</span><br><span class="line"></span><br><span class="line">84 bytes from 192.168.1.5 icmp_seq&#x3D;1 ttl&#x3D;64 time&#x3D;1.050 ms</span><br><span class="line"></span><br><span class="line">vpc2&gt; ping 192.168.1.6 -c 1</span><br><span class="line"></span><br><span class="line">84 bytes from 192.168.1.6 icmp_seq&#x3D;1 ttl&#x3D;64 time&#x3D;0.475 ms</span><br></pre></td></tr></table></figure><p>总结一下：<br>pvlan的实现：</p><ol><li>一定存在一个primary vlan, 里面有一个端口promiscuous port则可以ping通isolated</li><li>可以存在多个secondary vlan，secondary vlan之间不能通信，但都可与promiscuous port通信</li><li>secondary vlan分为community vlan和isolated vlan与secondary<ul><li>community vlan成员之间可以相互通信</li><li>isolated vlan成员之间不能相互通信</li><li>所有secondary vlan成员都能与promiscuous port通信</li></ul></li><li>pvlan作用域可以延伸到其它交换机，但是要保证交换机之间的链路是trunk，并允许primary vlan和secondary vlan通过 </li><li>上行设备只关心primary vlan而不会感知secondary vlan，从而节省vlan资源</li></ol><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p><a href="http://www.h3c.com/cn/d_201505/868804_30003_0.htm">PVLAN技术白皮书</a></p>]]></content:encoded>
      
      
      
      
      <comments>https://rancho333.github.io/2022/10/12/PVLAN%E6%B5%85%E6%9E%90/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>VTP协议简述</title>
      <link>https://rancho333.github.io/2022/10/11/VTP%E5%8D%8F%E8%AE%AE%E7%AE%80%E8%BF%B0/</link>
      <guid>https://rancho333.github.io/2022/10/11/VTP%E5%8D%8F%E8%AE%AE%E7%AE%80%E8%BF%B0/</guid>
      <pubDate>Tue, 11 Oct 2022 07:05:08 GMT</pubDate>
      
      <description>&lt;h1 id=&quot;写在前面&quot;&gt;&lt;a href=&quot;#写在前面&quot; class=&quot;headerlink&quot; title=&quot;写在前面&quot;&gt;&lt;/a&gt;写在前面&lt;/h1&gt;&lt;p&gt;本文简要介绍写cisco的私有vlan中继协议VTP(vlan trunking protocol)，然后使用eveng环境做一些简单实验。&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<h1 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h1><p>本文简要介绍写cisco的私有vlan中继协议VTP(vlan trunking protocol)，然后使用eveng环境做一些简单实验。</p><span id="more"></span><p>当二层环境中有多台交换机，并且需要配置多个vlan的时候，这是一个繁琐且无聊的配置行为。VTP协议可以让我们只用在一台交换机上创建vlan，其它交换机则会同步创建的vlan。</p><h1 id="了解VTP"><a href="#了解VTP" class="headerlink" title="了解VTP"></a>了解VTP</h1><p>VTP设备有三种角色：</p><ol><li>VTP server：可以修改vlan配置，生成VTP通告</li><li>VTP  client：不可以通过CLI修改vlan配置，只能通过同步VTP通告修改vlan配置</li><li>VTP transparent：透传VTP通告但是不同步，可以修改本地vlan，修改也只在本地生效</li></ol><p>VTP三种模式的能力概要如下：</p><table><thead><tr><th align="left"></th><th align="left">VTP server</th><th align="left">VTP Client</th><th align="left">VTP transparent</th></tr></thead><tbody><tr><td align="left">创建/修改/删除 vlans</td><td align="left">yes</td><td align="left">no</td><td align="left">only local</td></tr><tr><td align="left">同步</td><td align="left">yes</td><td align="left">yes</td><td align="left">no</td></tr><tr><td align="left">透传</td><td align="left">yes</td><td align="left">yes</td><td align="left">yes</td></tr></tbody></table><p>通过下面几条说明来简单了解下VTP：</p><ol><li>VTP可以自动添加，修改，删除vlans</li><li>对于每一次改动，<code>revision</code>编号会增加</li><li>最近一次的通告会被发送给所有的VTP clients</li><li>VTP clients会同步接收到的通告</li></ol><p>VTP虽然可以减少vlan配置的工作量，但是会存在一些风险。根本原因是：<br>  VTP server同时也是VTP client, 而VTP client会同步接收到的revision号比自己大的通告。</p><p>如果我们在现有的网络环境中添加一台VTP server，而这台VTP server上的revision号比现有环境中设备的都大，那么新设备上的vlan配置会覆盖所有设备。本质就是环境中可能会有非预期设备的revision最大，覆盖环境的vlan配置。</p><p>此外还需要了解VTP的另一个知识点：VTP pruning.<br><img src="https://rancho333.github.io/pictures/vtp_pruning.png"></p><p>如图，交换机之间通过trunk互联。当左侧vlan10中的PC发送一个广播报文后，所有交换机都会收到泛洪的消息，而中间交换机的下联口中并没有vlan10，上联交换机泛洪流量就是在浪费带宽了。<br>在非VTP环境下，泛洪流量会发送给所有的trunk端口(trunk允许该vlan通过)，因为交换机并不知道trunk对端是否有在该vlan的成员。<br>在VTP环境下，交换机知道trunk对端配置了那些vlan，所以不在这些vlan范围的内泛洪流量就可以不发送给对端。这就是VTP pruning.</p><h1 id="VTP的配置"><a href="#VTP的配置" class="headerlink" title="VTP的配置"></a>VTP的配置</h1><p>使用如下的拓扑来进行VTP的配置实验：<br><img src="https://rancho333.github.io/pictures/vtp_topology.png"></p><p>将交换机之间的互联接口全部配置成trunk。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">S3#show vtp status </span><br><span class="line">VTP Version capable             : 1 to 3</span><br><span class="line">VTP version running             : 1</span><br><span class="line">VTP Domain Name                 : </span><br><span class="line">VTP Pruning Mode                : Disabled</span><br><span class="line">VTP Traps Generation            : Disabled</span><br><span class="line">Device ID                       : aabb.cc80.3000</span><br><span class="line">Configuration last modified by 0.0.0.0 at 0-0-00 00:00:00</span><br><span class="line">Local updater ID is 0.0.0.0 (no valid interface found)</span><br><span class="line"></span><br><span class="line">Feature VLAN:</span><br><span class="line">--------------</span><br><span class="line">VTP Operating Mode                : Server</span><br><span class="line">Maximum VLANs supported locally   : 1005</span><br><span class="line">Number of existing VLANs          : 5</span><br><span class="line">Configuration Revision            : 0</span><br><span class="line">MD5 digest                        : 0x57 0xCD 0x40 0x65 0x63 0x59 0x47 0xBD </span><br><span class="line">                                    0x56 0x9D 0x4A 0x3E 0xA5 0x69 0x35 0xBC </span><br></pre></td></tr></table></figure><p>S4、S5的VTP信息和S3基本一致，对显示的信息做一个简单的说明：</p><ul><li><code>Configuration Revision 0</code>: 每一次修改vlan该数值都会加1. 0是初始值，没有任何vlan操作</li><li><code>VTP Operating Mode</code> : 默认的模式是server模式</li><li><code>VTP Pruning Mode</code> : 防止不必要的流量通过trunk链路</li><li> <code>VTP version running</code> : 当前运行的vtp版本，默认是v1. v2与v1的差别不大，v2上主要引入对令牌环vlan的支持。</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">S3(config)#vlan 10</span><br><span class="line">S3(config-vlan)#name first_vlan</span><br><span class="line"></span><br><span class="line">S3#show vlan brief </span><br><span class="line"></span><br><span class="line">VLAN Name                             Status    Ports</span><br><span class="line">---- -------------------------------- --------- -------------------------------</span><br><span class="line">1    default                          active    Et0&#x2F;0, Et0&#x2F;1, Et0&#x2F;2, Et0&#x2F;3</span><br><span class="line">10   first_vlan                       active    </span><br><span class="line"></span><br><span class="line">S3#show vtp status | include Revision</span><br><span class="line">Configuration Revision            : 1</span><br></pre></td></tr></table></figure><p>在S3上创建名为first_vlan的vlan10, 可以看到revision号增加了1. 但是在S4、S5上并没有任何同步动作：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">S4#show vtp status | begin existing</span><br><span class="line">Number of existing VLANs          : 5</span><br><span class="line">Configuration Revision            : 0</span><br><span class="line"></span><br><span class="line">S5#show vtp status | begin existing   </span><br><span class="line">Number of existing VLANs          : 5</span><br><span class="line">Configuration Revision            : 0</span><br></pre></td></tr></table></figure><p>这是因为必须要配置VTP domain才能正常同步。</p><p>在S4、S5上开启VTP debug。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">S4#debug sw-vlan vtp events </span><br><span class="line">vtp events debugging is on</span><br><span class="line"></span><br><span class="line">S5#debug sw-vlan vtp events </span><br><span class="line">vtp events debugging is on</span><br></pre></td></tr></table></figure><p>在S3上配置vtp domain:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">S3(config)#vtp domain rancho                   &#x2F;&#x2F; 配置vtp domain</span><br><span class="line">Changing VTP domain name from NULL to rancho</span><br><span class="line">S3(config)#</span><br><span class="line">*Oct 11 08:02:34.648: %SW_VLAN-6-VTP_DOMAIN_NAME_CHG: VTP domain name changed to rancho.</span><br></pre></td></tr></table></figure><p>可以在S4、S5看到vtp domain会自动同步过来。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">S5#</span><br><span class="line">*Oct 11 08:14:23.822: VTP LOG RUNTIME: Summary packet received in NULL domain state</span><br><span class="line">*Oct 11 08:14:23.822: VTP LOG RUNTIME: Summary packet received, domain &#x3D; rancho, rev &#x3D; 1, followers &#x3D; 0, length 77, trunk Et0&#x2F;1</span><br><span class="line">*Oct 11 08:14:23.822: VTP LOG RUNTIME: Transitioning from NULL to rancho domain</span><br><span class="line">*Oct 11 08:14:23.822: VTP LOG RUNTIME: Summary packet rev 1 greater than domain rancho rev 0</span><br></pre></td></tr></table></figure><p>我们可以看到两件有意思的事：</p><ul><li>S5收到来自domain为<code>rancho</code>的VTP报文，并且决定将自己的domain从<code>NULL</code>改成<code>rancho</code>。这只会存在于设备没有配置domain的时候</li><li>S5发现VTP报文中revision(1)比自己当前(0)的高，同步报文中的vlan信息</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">S5#no debug all                        &#x2F;&#x2F; 关闭debug功能</span><br><span class="line"></span><br><span class="line">S5#show vtp status | begin existing</span><br><span class="line">Number of existing VLANs          : 6</span><br><span class="line">Configuration Revision            : 1       &#x2F;&#x2F; revision数值增减了，同步了S3的vlan配置</span><br><span class="line"></span><br><span class="line">S5#show vlan brief                         &#x2F;&#x2F; 确认配置信息同步，vlan10有了</span><br><span class="line"></span><br><span class="line">VLAN Name                             Status    Ports</span><br><span class="line">---- -------------------------------- --------- -------------------------------</span><br><span class="line">1    default                          active    Et0&#x2F;2, Et0&#x2F;3</span><br><span class="line">10   first_vlan                       active    </span><br><span class="line"></span><br><span class="line">S4#show vlan brief </span><br><span class="line"></span><br><span class="line">VLAN Name                             Status    Ports</span><br><span class="line">---- -------------------------------- --------- -------------------------------</span><br><span class="line">1    default                          active    Et0&#x2F;2, Et0&#x2F;3</span><br><span class="line">10   first_vlan                       active    </span><br></pre></td></tr></table></figure><p>分别在S4、S5上各创建一个vlan</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">S4(config)#vlan 40</span><br><span class="line">S4(config-vlan)#name second_vlan</span><br><span class="line"></span><br><span class="line">S5(config)#vlan 50</span><br><span class="line">S5(config-vlan)#name third_vlan</span><br></pre></td></tr></table></figure><p>在S3上可以正常同步到：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">S3#show vlan brief </span><br><span class="line"></span><br><span class="line">VLAN Name                             Status    Ports</span><br><span class="line">---- -------------------------------- --------- -------------------------------</span><br><span class="line">1    default                          active    Et0&#x2F;2, Et0&#x2F;3</span><br><span class="line">10   first_vlan                       active    </span><br><span class="line">40   second_vlan                      active    </span><br><span class="line">50   third_vlan                       active    </span><br><span class="line"></span><br><span class="line">S3#show vtp status | include Revision</span><br><span class="line">Configuration Revision            : 3            &#x2F;&#x2F; 同步两次，revision从1增加到3</span><br></pre></td></tr></table></figure><p>修改S3的模式为client：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">S3(config)#vtp mode client </span><br><span class="line">S3#show vtp status | include Mode</span><br><span class="line">VTP Pruning Mode                : Disabled</span><br><span class="line">VTP Operating Mode                : Client</span><br><span class="line"></span><br><span class="line">S3(config)#vlan  100</span><br><span class="line">VTP VLAN configuration not allowed when device is in CLIENT mode.</span><br><span class="line">&#x2F;&#x2F; client模式就不能配置valn了</span><br></pre></td></tr></table></figure><p>修改S3的模式为透传模式：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">S3(config)#vtp mode transparent </span><br><span class="line">Setting device to VTP Transparent mode for VLANS.</span><br><span class="line">&#x2F;&#x2F; 可以本地修改vlan信息，但是不会影响其它的vtp设备</span><br><span class="line"></span><br><span class="line">S4(config)#vlan 70</span><br><span class="line">S5#show spanning-tree | include Altn</span><br><span class="line">Et0&#x2F;0               Altn BLK 100       128.1    P2p    &#x2F;&#x2F; S4,5之间的直连链路被block了</span><br><span class="line">S5#show vlan brief </span><br><span class="line"></span><br><span class="line">VLAN Name                             Status    Ports</span><br><span class="line">---- -------------------------------- --------- -------------------------------</span><br><span class="line">1    default                          active    Et0&#x2F;2, Et0&#x2F;3</span><br><span class="line">10   first_vlan                       active    </span><br><span class="line">40   second_vlan                      active    </span><br><span class="line">50   third_vlan                       active    </span><br><span class="line">70   VLAN0070                         active           &#x2F;&#x2F;但是S5依然能学到S4的vlan, 走的是S3的透传</span><br><span class="line"></span><br><span class="line">S3#show vlan brief                  &#x2F;&#x2F; 透传模式的S3并没有学到vlan70</span><br><span class="line"></span><br><span class="line">VLAN Name                             Status    Ports</span><br><span class="line">---- -------------------------------- --------- -------------------------------</span><br><span class="line">1    default                          active    Et0&#x2F;2, Et0&#x2F;3</span><br><span class="line">10   first_vlan                       active    </span><br><span class="line">40   second_vlan                      active    </span><br><span class="line">50   third_vlan                       active    </span><br><span class="line">60   VLAN0060                         active    </span><br></pre></td></tr></table></figure><p>最后一个小的知识点就是关于vlan的配置文件。只要开启vtp功能，vlan的配置信息是独立存放在vlan.data文件中的</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">S3#dir unix: | include vlan</span><br><span class="line">917755  -rw-         796  Oct 11 2022 08:34:46 +00:00  vlan.dat-00048</span><br><span class="line">&#x2F;&#x2F; 不同的设备存放的路径可能不一样</span><br></pre></td></tr></table></figure><p>并且vlan的配置信息在show run中是查看不到的，当关闭vtp时，vlan的配置信息就可以在show run中看到了。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">S3(config)#vtp mode off </span><br><span class="line"></span><br><span class="line">S3#show running-config | include vlan</span><br><span class="line">vlan 10</span><br><span class="line"> name first_vlan</span><br><span class="line">vlan 40</span><br><span class="line"> name second_vlan</span><br><span class="line">vlan 50</span><br><span class="line"> name third_vlan</span><br><span class="line">vlan 60 </span><br></pre></td></tr></table></figure><p>最最后关于VTPv3, V3和V2兼容，和v1兼容。有比较大的差异，主要在：</p><ul><li>VTP primary Server</li><li>Extended vlanss</li><li>private vlanss</li><li>rspan vlanss</li><li>mst support</li><li>authentication improvements<br>这里不做深入研究了，了解点VTPv2的皮毛先, 凑合用下吧。</li></ul><p>为了严谨点，附上一个VTP报文截图吧, 创建vlan80时抓的，看来vtp会携带所有的vlan信息。<br><img src="https://rancho333.github.io/pictures/vtp_packet.png"></p><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p><a href="https://www.cisco.com/c/zh_cn/support/docs/lan-switching/vtp/10558-21.html">了解 VLAN 中继协议 (VTP)</a></p>]]></content:encoded>
      
      
      
      
      <comments>https://rancho333.github.io/2022/10/11/VTP%E5%8D%8F%E8%AE%AE%E7%AE%80%E8%BF%B0/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>snake traffic原理简述</title>
      <link>https://rancho333.github.io/2022/09/10/snake-traffic%E5%8E%9F%E7%90%86%E7%AE%80%E8%BF%B0/</link>
      <guid>https://rancho333.github.io/2022/09/10/snake-traffic%E5%8E%9F%E7%90%86%E7%AE%80%E8%BF%B0/</guid>
      <pubDate>Sat, 10 Sep 2022 01:00:38 GMT</pubDate>
      
      <description>&lt;h1 id=&quot;写在前面&quot;&gt;&lt;a href=&quot;#写在前面&quot; class=&quot;headerlink&quot; title=&quot;写在前面&quot;&gt;&lt;/a&gt;写在前面&lt;/h1&gt;&lt;p&gt;前面写了一篇&lt;a href=&quot;https://rancho333.github.io/2022/09/02/%E4%BD%BF%E7%94%A8ixia%E5%AF%B9sonic%E8%BF%9B%E8%A1%8CL2-3%E6%89%93%E6%B5%81%E6%B5%8B%E8%AF%95/&quot;&gt;使用ixia对sonic进行L2,3打流测试&lt;/a&gt;, 这种场景下仪表的一个端口发包，dut的一个端口与之相连收包，通过在vlan内转发到DUT另一个端口，该端口与仪表的收包端口相连。仪表的一个端口发包，一个收包验证，从而验证二层转发(配置ip，路由即可验证三层)。&lt;br&gt;这种场景只能验证两个端口之间的数据转发，如果要一次验证所有端口的数据转发，那么需要用到snake traffic，将所有端口串起来，数据依次流经所有端口&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<h1 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h1><p>前面写了一篇<a href="https://rancho333.github.io/2022/09/02/%E4%BD%BF%E7%94%A8ixia%E5%AF%B9sonic%E8%BF%9B%E8%A1%8CL2-3%E6%89%93%E6%B5%81%E6%B5%8B%E8%AF%95/">使用ixia对sonic进行L2,3打流测试</a>, 这种场景下仪表的一个端口发包，dut的一个端口与之相连收包，通过在vlan内转发到DUT另一个端口，该端口与仪表的收包端口相连。仪表的一个端口发包，一个收包验证，从而验证二层转发(配置ip，路由即可验证三层)。<br>这种场景只能验证两个端口之间的数据转发，如果要一次验证所有端口的数据转发，那么需要用到snake traffic，将所有端口串起来，数据依次流经所有端口</p><span id="more"></span><h1 id="snake-traffica"><a href="#snake-traffica" class="headerlink" title="snake traffica"></a>snake traffica</h1><p>先说明基本转发原理，然后根据不同的测试方案做进一步的说明。</p><h2 id="入-转-出理论基础"><a href="#入-转-出理论基础" class="headerlink" title="入-转-出理论基础"></a>入-转-出理论基础</h2><p>二层snake traffic依赖vlan对数据流进行方向控制，打流过程中有三个数据流的基础操作点。</p><ul><li>入。所有端口都设置成untag, 所以Rx是untag报文，根据端口的pvid打上对应的vlan tag</li><li>转。根据打上的vlan tag, 将报文转发到同vlan的其它端口，让其转发出去。<code>实际就是将报文从该端口的Tx发出去</code></li><li>出。出端口收到tag报文，剥离tag，从Tx发出出去。<br><img src="https://rancho333.github.io/pictures/snake_traffic_basic.png"></li></ul><h2 id="全loopback-snake-traffic"><a href="#全loopback-snake-traffic" class="headerlink" title="全loopback snake traffic"></a>全loopback snake traffic</h2><p>这种场景下，交换机前面板口全部通过loopback环回，当然也可以phy/mac环回。拓扑图如下：<br><img src="https://rancho333.github.io/pictures/snake_traffic_loopback.png"></p><p>左侧的拓扑图是配置原理，右侧的拓扑是数据流的走向。broadcome芯片sdk配置如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">vlan clear              &#x2F;&#x2F; 清除所有vlan</span><br><span class="line">vlan remove 1 pbm&#x3D;ce       &#x2F;&#x2F; 将所有端口从默认vlan中移除</span><br><span class="line">&#x2F;&#x2F;pbm是port bitmap，ubm是untag bitmap</span><br><span class="line">vlan create 100 pbm&#x3D;ce1,ce2 ubm&#x3D;ce1,ce2; pvlan set ce1 100          &#x2F;&#x2F; 创建vlan100，vlan100的端口成员是ce1和ce2，不带tag；设置ce1的native vlan为100</span><br><span class="line">vlan create 101 pbm&#x3D;ce2,ce3 ubm&#x3D;ce2,ce3; pvlan set ce2 101</span><br><span class="line">vlan create 102 pbm&#x3D;ce3,ce4 ubm&#x3D;ce3,ce4; pvlan set ce3 102</span><br><span class="line">vlan create 103 pbm&#x3D;ce4,ce1 ubm&#x3D;ce4,ce1; pvlan set ce4 103</span><br><span class="line">ps ce            &#x2F;&#x2F; 确认所有端口up</span><br><span class="line">clear c                  &#x2F;&#x2F; 清除端口统计数据</span><br><span class="line">tx 800 pbm&#x3D;ce0 vlan&#x3D;100        &#x2F;&#x2F; 生成数据流</span><br><span class="line">port ce0 en&#x3D;off            &#x2F;&#x2F; 结束打流</span><br><span class="line">port ce0 en&#x3D;on            &#x2F;&#x2F; 恢复端口</span><br><span class="line">show c CDMIB_RPOK.ce      &#x2F;&#x2F; 查看计数</span><br></pre></td></tr></table></figure><p>每个端口属于两个vlan，<code>通过native vlan来控制数据流发往那个vlan，另一个vlan则用来接收数据, 这样就形成了一个固定方向的数据流</code>。</p><p>以下图来详细说明数据流的走向：<br><img src="https://rancho333.github.io/pictures/snake_traffic_loopback_internal.png"></p><ol><li>初始状态下。cpu通过tx命令生成报文发送到ce1，ce1从tx将报文转发出去。实际上ASIC通过cpu0接口(asic上一个不可见的端口)与CPU连接，cpu将报文发送到cpu0，cpu0将报文转发给ce1. 所以看起来就是：cpu生成报文，ce1从tx将报文转发出去</li><li>ce1的端口是loopback，tx的报文会转到rx，rx收到报文打上100的vlan tag，转给vlan 100的成员端口ce2</li><li>ce2将报文untag之后从tx发送出去，因为是loopback，所以又会从rx回来，rx收到报文打上101的vlan tag, 转给vlan 101的成员端口</li><li>同理ce3将报文转给ce4，ce4将报文转回给ce1</li><li>ce1将ce4转来的报文从Tx转发出去，重复步骤1的流程。这样就形成了loop的数据流，很快就会达到线速。</li></ol><p>一点说明：这种场景下，因为有loopback的存在，所以端口的tx，rx都会参与到流量的转发。这就可以理解为双向打流。</p><h2 id="端口通过DAC-cable互联"><a href="#端口通过DAC-cable互联" class="headerlink" title="端口通过DAC cable互联"></a>端口通过DAC cable互联</h2><p>这种场景下，交换机相邻的两个端口用cable先互联起来，相邻的两个没有用cable先互联的端口则配置在相同vlan中进行数据转发。可以这么理解，同一个vlan内的两个端口组成一个交换机，然后用cable线将这些交换机依次连接，组成一个环。拓扑如下：<br><img src="https://rancho333.github.io/pictures/snake_traffic_dac.png"></p><p>端口2,3组成一台交换机，端口3,4组成一个交换机，互联成环。同样的道理，如果进行三层打流，并将所有的端口串在一起，可以用vrf，每两个端口在一个vrf中组成一个router，vrf之间通过cable互联，通过配置ip和路由就可实现snake traffic。</p><p>dac cable连接的snake traffic配置如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 只贴出vlan配置，其它参考上面</span><br><span class="line">vlan create 100 pbm&#x3D;ce2,ce3 ubm&#x3D;ce2,ce3; pvlan set ce2,ce3 100</span><br><span class="line">vlan create 101 pbm&#x3D;ce4,ce1 ubm&#x3D;ce4,ce1; pvlan set ce4,ce1 101</span><br></pre></td></tr></table></figure><p>这种场景下，一个端口只属于一个vlan(类似于上层的access端口)，端口所属的vlan就是native vlan, 不是很确定pvlan还需不需要配置。此时不需要native vlan来控制数据流的方向，所以两个端口pvlan都一样。</p><p>以下图来详细说明数据流的走向：<br><img src="https://rancho333.github.io/pictures/snake_traffic_dac_internal.png"></p><ol><li>初始状态下。cpu生成报文让ce1从tx发送出去。报文通过cable先发送到ce2</li><li>ce2 rx到报文后，打上vlan tag 100，发送给vlan 100成员端口ce3</li><li>ce3收到报文之后将tag剥离从tx发出， 通过cable线到达ce4</li><li>ce4通过vlan将报文转给ce1，ce1从tx发出，重复步骤1的流程，形成loop数据流，很快就会达到线速</li></ol><h2 id="dac和loopback混合测试"><a href="#dac和loopback混合测试" class="headerlink" title="dac和loopback混合测试"></a>dac和loopback混合测试</h2><p>实验拓扑如图：<br><img src="https://rancho333.github.io/pictures/snake_traffic_dac_loopback.png"></p><p>其中，12,34是dac方式，5,6,7,8是loopback方式。<br>需要注意下两种方式之间的流量衔接问题接口。<br>对于dac向loopback过度的节点，即4,5: 将4,5配置在同一个vlan中，并将4的native vlan设置成该值，这样dac方向的流量就可以从4转发到5，然后进入loopback方向。</p><p>对于loopback向dac过度的节点，将8，1配置在同一个vlan中，两者的native vlan都设置成该vlan，这样8 rx的流量就会转给1，进入dac方向。</p><p>如果不使用CPU发包，而是将一个端口与测试连接，拓扑如下：<br><img src="https://rancho333.github.io/pictures/snake_traffic_ixia.png"></p><p>配置不需要做任何改变。理解报文的转发流程，拓扑怎么变都可以搞定。<br>ixia发出的报文对8来说是rx，8的native vlan是8,1共同所属的vlan，所以流量转发到1。<br>7转发给8的流量，8从tx发出到ixia，所以ixia从一个端口发出的报文，又从该端口收回来，查看ixia端口的丢包状态即可了解dut的丢包状态。</p>]]></content:encoded>
      
      
      
      
      <comments>https://rancho333.github.io/2022/09/10/snake-traffic%E5%8E%9F%E7%90%86%E7%AE%80%E8%BF%B0/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>eveng虚拟网络环境简述</title>
      <link>https://rancho333.github.io/2022/09/06/eveng%E8%99%9A%E6%8B%9F%E7%BD%91%E7%BB%9C%E7%8E%AF%E5%A2%83%E7%AE%80%E8%BF%B0/</link>
      <guid>https://rancho333.github.io/2022/09/06/eveng%E8%99%9A%E6%8B%9F%E7%BD%91%E7%BB%9C%E7%8E%AF%E5%A2%83%E7%AE%80%E8%BF%B0/</guid>
      <pubDate>Tue, 06 Sep 2022 08:13:55 GMT</pubDate>
      
      <description>&lt;h1 id=&quot;写在前面&quot;&gt;&lt;a href=&quot;#写在前面&quot; class=&quot;headerlink&quot; title=&quot;写在前面&quot;&gt;&lt;/a&gt;写在前面&lt;/h1&gt;&lt;p&gt;本文主要分析下vmware三种网络模式的实现，然后说明eveng如何借助vmware虚拟网卡实现内部设备与外网的联通，最后分析下eveng lab中虚拟网络设备之间的连通性。&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<h1 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h1><p>本文主要分析下vmware三种网络模式的实现，然后说明eveng如何借助vmware虚拟网卡实现内部设备与外网的联通，最后分析下eveng lab中虚拟网络设备之间的连通性。</p><span id="more"></span><h1 id="VMware的三种网络模式"><a href="#VMware的三种网络模式" class="headerlink" title="VMware的三种网络模式"></a>VMware的三种网络模式</h1><p>vmware有桥接、NAT、host-only三种网络模式。其中NAT和host-only会默认在host上各创建一张虚拟网卡。其中VMnet1是host-only，VMnet8是NAT。我们在虚拟的配置hardware时，可以添加网络设备。<br><img src="https://rancho333.github.io/pictures/eveng_vmware_network.png"><br>如果选择NAT、host-only、桥接则使用默认网卡。选择custome时，可以指定我们自己创建的其它网卡。注意，只能存在一个bridge和NAT的网络，即我们可以额外添加的虚拟网络类型只能是host-only。下面对三种网络模式做一个简单说明。</p><h2 id="桥接模式"><a href="#桥接模式" class="headerlink" title="桥接模式"></a>桥接模式</h2><p>三种模式下只有桥接模式没有创建虚拟网卡，这种模式下虚拟机和主机相当于连接在同一个网桥上，网桥的出口是主机的物理出口网卡，虚拟机的ip和主机的ip由上游DHCP同一分配，两者在同一网段，虚拟机可以自由的访问同子网的主机(当然包括主机)，这种情况下虚拟没有和外部网络隔离，会消耗主机网络环境的ip。可以同时满足主机与虚拟机之间的网络连通，以及虚拟机与外部网络之间的网络连通。<br><img src="https://rancho333.github.io/pictures/eveng_vmware_bridge.png"></p><p>简言之，桥接模式就是虚拟机和主机连接在同一个网桥上，网桥上连是出口，下连是虚拟机和主机。桥接模式和主机物理网卡是强相关的，在创建bridge虚拟网络时，选择auto选项，vmware会自动从主机多网卡中选择合适的进行桥接。</p><h2 id="NAT模式"><a href="#NAT模式" class="headerlink" title="NAT模式"></a>NAT模式</h2><p>NAT模式默认创建VMnet8虚拟网卡。虚拟机网卡与vmnet8相连，vmnet8在主机上是一块物理网卡，是直连网段，所以主机与虚拟机之间可以直接通过Vmnet8通信。vmnet8上开启dhcp服务，负责给虚拟机分配ip，在vmware设置中可以设置所需的网段。当虚拟机需要和主机外部通信时，vmnet8通过NAT服务将虚拟机ip映射主机某个物理网卡ip，从而实现和外网的连通性。模型如下图所示：<br><img src="https://rancho333.github.io/pictures/eveng_vmware_nat.png"></p><p>这种场景下，虚拟机与主机通过vmnet8同网段通信，复用主机ip通过NAT与外网通信。在NAT模式的配置下并没有看到NAT转换的具体配置，关键是没看到转换后的ip, 这其实与主机的实际出口网卡相关，这难道和桥接模式一样，也是自动选择的？</p><h2 id="host-only模式"><a href="#host-only模式" class="headerlink" title="host-only模式"></a>host-only模式</h2><p>host-only模式默认创建VMnet1虚拟网卡。虚拟机网卡与vmnet1相连。该模式本质就是NAT模式阉割掉NAT功能，使得虚拟机只能与主机网络可达，而不能访问外部网络。这样可以有效的实现虚拟机与外部网络环境的隔离。</p><h2 id="一些小结思考"><a href="#一些小结思考" class="headerlink" title="一些小结思考"></a>一些小结思考</h2><p>真实的拓扑模型可能和上述的不一样，上述只是自己实验加理解的结果。在上面理解中，VMnet我其实是理解成三层交换机而不是网卡，因为它可以被多个虚拟机连接，但是网卡的一个端口在系统上会映射成一个网络设备，多个接口会映射成多个网络设备，所以在windows的视角中，vmnet就是一个单接口的网卡。<br>有些博客中提到：vmware会创建虚拟交换机和虚拟网卡，虚拟交换机互联虚拟机网卡，主机虚拟网卡。<br><img src="https://rancho333.github.io/pictures/eveng_vmware_blog.png"><br>这种拓扑是比较合理的，windows的视角下有一块网卡VMnet8，而虚拟机连接的是同名为VMnet8的网桥，所以多个虚拟机可以连接到VMnet8，这三者组成vmware虚拟网络环境，虚拟机和主机通过vmnet8同网段进行通信，vmnet8与物理NIC之间通过NAT与外网通信。给虚拟机设置网卡的配置界面如下：<br><img src="https://rancho333.github.io/pictures/eveng_vmware_adapter.png"></p><p>在虚拟机的视角下，每添加一个network adapter就是在虚拟机上创建一个物理网卡，network connection选项则是虚拟机网卡连接vmware虚拟网络环境的模式，通过连接到指定的虚拟网桥来实现的，而不同的虚拟网桥连接着不同的windows虚拟网卡(bridge没有虚拟网卡)。</p><h1 id="eveng中镜像的连接实现"><a href="#eveng中镜像的连接实现" class="headerlink" title="eveng中镜像的连接实现"></a>eveng中镜像的连接实现</h1><p>一个简单的eveng镜像连接如下所示：<br><img src="https://rancho333.github.io/pictures/eveng_image_connection.png"></p><p>这里有三个对象，switch、vpc以及他们的连接线，switch和vpc由各自的镜像提供运算仿真逻辑，当我们需要仿真某种设备时，只需要将其镜像导入eveng，而镜像的运行则依赖于eveng的三大虚拟仿真组件：iol、qemu、dynamips。那么镜像之间的连接线是如何实现的呢？通过bridge来实现。在上图拓扑基础上我们进入eveng的CLI界面：<br>将lab中的image启动后查看bridge状态：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">root@eve-ng5:~# brctl show</span><br><span class="line">bridge namebridge idSTP enabledinterfaces</span><br><span class="line">pnet08000.000c297a7ddenoeth0</span><br><span class="line">pnet18000.000c297a7de8noeth1</span><br><span class="line">...</span><br><span class="line">vnet0_18000.4e340b0134f2novunl0_1_0</span><br><span class="line">            vunl0_2_0</span><br></pre></td></tr></table></figure><p>vnet0_1仿真的就是S和vpc的连接线，bridge上有两个接口分别连接在S和vpc上。我们增加拓扑结构：<br><img src="https://rancho333.github.io/pictures/eveng_image_connection_more.png"></p><p>再次查看bridge状态：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">root@eve-ng5:~# brctl show</span><br><span class="line">bridge namebridge idSTP enabledinterfaces</span><br><span class="line">pnet08000.000c297a7ddenoeth0</span><br><span class="line">...</span><br><span class="line">vnet0_18000.7a42880945b1novunl0_1_0</span><br><span class="line">            vunl0_2_0</span><br><span class="line">vnet0_28000.0ef8341d6178novunl0_1_16</span><br><span class="line">            vunl0_3_0</span><br><span class="line">vnet0_38000.6a2c8be29ff6novunl0_1_32</span><br><span class="line">            vunl0_4_0</span><br></pre></td></tr></table></figure><p>图中有3条连接线，所以这里有三个vnet_name命名模式的网桥，一个网桥模拟一个连接线，每个网桥上都有vun0_1_name命名模式的接口，可见这是S的接口，所以他们这件的真实的连接拓扑如图：<br><img src="https://rancho333.github.io/pictures/eveng_image_connection_bridge.png"></p><p>当删除网元设备或关闭lab的时候，模拟他们连接线的网桥并不会自动删除，自由彻底关闭eveng虚拟机才会清除，但这对我们的使用并不会有什么影响。</p><h1 id="eveng虚拟机的网卡"><a href="#eveng虚拟机的网卡" class="headerlink" title="eveng虚拟机的网卡"></a>eveng虚拟机的网卡</h1><p>eveng本身就是一台运行在linux中的虚拟机，在创建虚拟机的时候会指定网卡以及连接方式。在<code>一些小结思考</code>图示中我们给eveng添加了两块网卡。每块网卡以名为ethnum的模式命名：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">root@eve-ng5:~# ifconfig </span><br><span class="line">eth0: flags&#x3D;4163&lt;UP,BROADCAST,RUNNING,MULTICAST&gt;  mtu 1500</span><br><span class="line">        ether 00:0c:29:7a:7d:de  txqueuelen 1000  (Ethernet)</span><br><span class="line">        RX packets 390  bytes 73174 (73.1 KB)</span><br><span class="line">        RX errors 0  dropped 0  overruns 0  frame 0</span><br><span class="line">        TX packets 552  bytes 75404 (75.4 KB)</span><br><span class="line">        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0</span><br><span class="line"></span><br><span class="line">eth1: flags&#x3D;4163&lt;UP,BROADCAST,RUNNING,MULTICAST&gt;  mtu 1500</span><br><span class="line">        ether 00:0c:29:7a:7d:e8  txqueuelen 1000  (Ethernet)</span><br><span class="line">        RX packets 21  bytes 3432 (3.4 KB)</span><br><span class="line">        RX errors 0  dropped 0  overruns 0  frame 0</span><br><span class="line">        TX packets 14  bytes 1136 (1.1 KB)</span><br><span class="line">        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0</span><br></pre></td></tr></table></figure><p>eth0对应的是Network Adapter，eth1对应的是Network Adapter2,其中eth0作为管理网卡，也就是我们通过web访问eveng的ip。注意eveng会为每块网卡创建一个bridge, 然后将网卡attach到brige上。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">root@eve-ng5:~# brctl show</span><br><span class="line">bridge namebridge idSTP enabledinterfaces</span><br><span class="line">pnet08000.000c297a7ddenoeth0</span><br><span class="line">pnet18000.000c297a7de8noeth1</span><br><span class="line">pnet28000.000000000000no</span><br><span class="line">pnet38000.000000000000no</span><br><span class="line">pnet48000.000000000000no</span><br><span class="line">pnet58000.000000000000no</span><br><span class="line">pnet68000.000000000000no</span><br><span class="line">pnet78000.000000000000no</span><br><span class="line">pnet88000.000000000000no</span><br><span class="line">pnet98000.000000000000no</span><br></pre></td></tr></table></figure><p>网卡ethnum与网桥pnetnum一一对应，eveng最大支持10块网卡。eth0作为管理网口，一般选择host-only, 这样可以配置dhcp地址池，使其每次启动获得固定ip，并且和外网隔离。如果使用bridge模式eveng的管理ip则会随主机网络环境变换而发生变化。管理网口ip就是网桥pnet0的ip:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">root@eve-ng5:~# ifconfig pnet0</span><br><span class="line">pnet0: flags&#x3D;4163&lt;UP,BROADCAST,RUNNING,MULTICAST&gt;  mtu 1500</span><br><span class="line">        inet 192.168.183.134  netmask 255.255.255.0  broadcast 192.168.183.255</span><br><span class="line">        inet6 fe80::20c:29ff:fe7a:7dde  prefixlen 64  scopeid 0x20&lt;link&gt;</span><br><span class="line">        ether 00:0c:29:7a:7d:de  txqueuelen 1000  (Ethernet)</span><br><span class="line">        RX packets 1064  bytes 196089 (196.0 KB)</span><br><span class="line">        RX errors 0  dropped 0  overruns 0  frame 0</span><br><span class="line">        TX packets 1576  bytes 217466 (217.4 KB)</span><br><span class="line">        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0</span><br></pre></td></tr></table></figure><p>为什么要将网卡attach到bridge上呢？这是为了让lab中的镜像可以访问到主机网络和外部网络。bridge在lab的表现形式是cloudNum。<br><img src="https://rancho333.github.io/pictures/eveng_network_cloud.png"></p><p>pnet0对应的是cloud0, pnet1对应的是cloud1，依次类推。lab中网元访问外部网络如图示：<br><img src="https://rancho333.github.io/pictures/eveng_network_cloud0.png"></p><p>vpc可以向VMnet1请求dhcp, 获得和管理网口同网段的ip：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">VPCS&gt; ip dhcp</span><br><span class="line">DDORA IP 192.168.183.143&#x2F;24</span><br></pre></td></tr></table></figure><p>其完整的网络连接拓扑如下图：<br><img src="https://rancho333.github.io/pictures/eveng_network_lab_connection.png"></p><p>当vpc请求dhcp时，我们在windows上对VMnet1抓包可以看到dhcp交互报文。</p><p>lab中的网元连接到不同的cloud，就可以根据cloud所属网桥的网卡的连接方式(bridge, nat, host-only)获得对应的网络能力，实现lab与主机和外部网络的连通性。</p><p>总结一下，配置eveng时的network adapter对应eveng中的eth网卡，eth网卡attch到pnet网桥上，pnet网桥对应lab中的cloud，lab中的网元连接到对应cloud即可获得相应网络能力。</p><h2 id="完整的eveng与vmware虚拟网络连接示意图"><a href="#完整的eveng与vmware虚拟网络连接示意图" class="headerlink" title="完整的eveng与vmware虚拟网络连接示意图"></a>完整的eveng与vmware虚拟网络连接示意图</h2><p>vmware是可以创建多张虚拟网卡的，默认有三种网络类型，bridge没有虚拟网卡，VMnet1对应host-only,VMnet8对应NAT。虽然允许创建额外的VMnet，<code>但是类型只能是host-only</code>，所以看起好像没什么创建的必要，默认的就已经够用了。我们需要做的也就是配置一下dhcp地址池(使用默认的也行)。<br>对于eveng的虚拟网络，由外网、windows、vmware、eveng、lab这些对象组成，完整的网络拓扑如下：<br><img src="https://rancho333.github.io/pictures/eveng_network_topology.png"></p><p>下图是在vmware下创建虚拟网卡的界面，可以看到vmnet0虽然没有在windows上创建网卡，但是在vmware中还是有设备的，此时vmnet0就是一个网桥。<br><img src="https://rancho333.github.io/pictures/eveng_vmware_vnic.png"></p><p>所以在vmware中创建一张网卡后：</p><ol><li>在windows网络中添加了一张网卡</li><li>在vmware环境中添加了一个同名网桥</li><li>当将这张网卡配置给虚拟机时，虚拟机中创建一张网卡，然后连接到vmware的网桥，获得对应网络能力</li></ol>]]></content:encoded>
      
      
      
      <category domain="https://rancho333.github.io/tags/eveng/">eveng</category>
      
      
      <comments>https://rancho333.github.io/2022/09/06/eveng%E8%99%9A%E6%8B%9F%E7%BD%91%E7%BB%9C%E7%8E%AF%E5%A2%83%E7%AE%80%E8%BF%B0/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>使用ixia对sonic进行L2,3打流测试</title>
      <link>https://rancho333.github.io/2022/09/02/%E4%BD%BF%E7%94%A8ixia%E5%AF%B9sonic%E8%BF%9B%E8%A1%8CL2-3%E6%89%93%E6%B5%81%E6%B5%8B%E8%AF%95/</link>
      <guid>https://rancho333.github.io/2022/09/02/%E4%BD%BF%E7%94%A8ixia%E5%AF%B9sonic%E8%BF%9B%E8%A1%8CL2-3%E6%89%93%E6%B5%81%E6%B5%8B%E8%AF%95/</guid>
      <pubDate>Fri, 02 Sep 2022 07:22:01 GMT</pubDate>
      
      <description>&lt;h1 id=&quot;环境说明&quot;&gt;&lt;a href=&quot;#环境说明&quot; class=&quot;headerlink&quot; title=&quot;环境说明&quot;&gt;&lt;/a&gt;环境说明&lt;/h1&gt;&lt;p&gt;实验拓扑如图：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://rancho333.github.io/pictures/ixia_sonic_topology.png&quot;&gt;&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<h1 id="环境说明"><a href="#环境说明" class="headerlink" title="环境说明"></a>环境说明</h1><p>实验拓扑如图：</p><p><img src="https://rancho333.github.io/pictures/ixia_sonic_topology.png"></p><span id="more"></span><p>线连接好后，ixia上做些配置使端口up。sonic上link training和auto negotiation默认关闭，FEC开启。在ixia上对应接口做设置与之匹配。</p><p><img src="https://rancho333.github.io/pictures/ixia_port_up.png"></p><p>确认端口up:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">root@localhost:&#x2F;home&#x2F;admin# show interfaces status Ethernet49</span><br><span class="line">  Interface        Lanes    Speed    MTU    FEC    Alias    Vlan    Oper    Admin             Type    Asym PFC</span><br><span class="line">-----------  -----------  -------  -----  -----  -------  ------  ------  -------  ---------------  ----------</span><br><span class="line"> Ethernet49  41,42,43,44     100G   9216     rs    etp49  routed      up       up  QSFP28 or later         N&#x2F;A</span><br><span class="line">root@localhost:&#x2F;home&#x2F;admin# show interfaces status Ethernet50</span><br><span class="line">  Interface        Lanes    Speed    MTU    FEC    Alias    Vlan    Oper    Admin             Type    Asym PFC</span><br><span class="line">-----------  -----------  -------  -----  -----  -------  ------  ------  -------  ---------------  ----------</span><br><span class="line"> Ethernet50  45,46,47,48     100G   9216     rs    etp50  routed      up       up  QSFP28 or later         N&#x2F;A&#x3D;</span><br></pre></td></tr></table></figure><h1 id="二层打流"><a href="#二层打流" class="headerlink" title="二层打流"></a>二层打流</h1><p>ixia eth7端口发出二层报文，sonic两个端口在同一vlan，ixia eth8端口接收报文进行数据统计，检查是否丢包。同理eth8发包，eth7收包。这样就实现双向二层线速打流测试。详细步骤如下：</p><p>sonic配置：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">config vlan add 78</span><br><span class="line">config vlan member add -u 78 Ethernet49</span><br><span class="line">config vlan member add -u 78 Ethernet50</span><br><span class="line"></span><br><span class="line">确认vlan配置：</span><br><span class="line">root@localhost:&#x2F;home&#x2F;admin# show vlan brief </span><br><span class="line">+-----------+--------------+------------+----------------+-------------+-----------------------+</span><br><span class="line">|   VLAN ID | IP Address   | Ports      | Port Tagging   | Proxy ARP   | DHCP Helper Address   |</span><br><span class="line">+&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;+&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;+&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;+&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;+&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;+&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;+</span><br><span class="line">|        78 |              | Ethernet49 | untagged       | disabled    |                       |</span><br><span class="line">|           |              | Ethernet50 | untagged       |             |                       |</span><br></pre></td></tr></table></figure><p>ixia进行如下配置：<br>如图分别将eth7, eth8创建成L2接口：<br><img src="https://rancho333.github.io/pictures/ixia_l2_port.png"></p><p>之后创建二层流：<br><img src="https://rancho333.github.io/pictures/ixia_l2_traffic.png"></p><p>图示是eth7发送，eth8接收检查，同理创建反向流，实现双向打流测试。注意最好修改二层报文的源目mac地址。</p><p>最后打流测试：<br><img src="https://rancho333.github.io/pictures/ixia_l2_traffic_loss.png"></p><h1 id="三层打流"><a href="#三层打流" class="headerlink" title="三层打流"></a>三层打流</h1><p>ixia eth7,8设置为三层接口，网关指向sonic，创建两条流分别：src为eth7，dst为eth8； src为eth8,dst为eth7.这样就实现双向三层线速打流测试。详细步骤如下：</p><p>sonic配置：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">config interface ip add Ethernet49 10.1.1.2&#x2F;24 </span><br><span class="line">config interface ip add Ethernet50 10.1.2.2&#x2F;24</span><br><span class="line"></span><br><span class="line">确认配置：</span><br><span class="line">root@localhost:&#x2F;home&#x2F;admin# show ip interfaces </span><br><span class="line">Interface    Master    IPv4 address&#x2F;mask    Admin&#x2F;Oper    BGP Neighbor    Neighbor IP</span><br><span class="line">-----------  --------  -------------------  ------------  --------------  -------------</span><br><span class="line">Ethernet49             10.1.1.2&#x2F;24          up&#x2F;up         N&#x2F;A             N&#x2F;A</span><br><span class="line">Ethernet50             10.1.2.2&#x2F;24          up&#x2F;up         N&#x2F;A             N&#x2F;A</span><br></pre></td></tr></table></figure><p>ixia进行如下配置：<br>如图所示分别将eth7,eth8创建成L3接口：<br><img src="https://rancho333.github.io/pictures/ixia_l3_port.png"></p><p>然后依次为两个接口配置ip地址和gateway:<br><img src="https://rancho333.github.io/pictures/ixia_l3_port_ip.png"></p><p>将拓扑使能之后，测试网络的连通性：<br><img src="https://rancho333.github.io/pictures/ixia_l3_port_ping.png"></p><p>之后创建L3流，图上所示是eth7到eth8的流，同理创建eth8到eth7的流：<br><img src="https://rancho333.github.io/pictures/ixia_l3_traffic.png"></p><p>注意和L2的数据流不同，L3不需要手动修改报文的src mac，dst mac等字段，会自动配置。</p><p>最后打流测试，查看丢包情况：<br><img src="https://rancho333.github.io/pictures/ixia_l3_traffic_loss.png"></p>]]></content:encoded>
      
      
      
      
      <comments>https://rancho333.github.io/2022/09/02/%E4%BD%BF%E7%94%A8ixia%E5%AF%B9sonic%E8%BF%9B%E8%A1%8CL2-3%E6%89%93%E6%B5%81%E6%B5%8B%E8%AF%95/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>半自动化批量保存网页</title>
      <link>https://rancho333.github.io/2022/08/24/%E5%8D%8A%E8%87%AA%E5%8A%A8%E5%8C%96%E6%89%B9%E9%87%8F%E4%BF%9D%E5%AD%98%E7%BD%91%E9%A1%B5/</link>
      <guid>https://rancho333.github.io/2022/08/24/%E5%8D%8A%E8%87%AA%E5%8A%A8%E5%8C%96%E6%89%B9%E9%87%8F%E4%BF%9D%E5%AD%98%E7%BD%91%E9%A1%B5/</guid>
      <pubDate>Wed, 24 Aug 2022 06:28:35 GMT</pubDate>
      
        
        
      <description>&lt;p&gt;使用两个工具&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;web scraper 批量获取文章的链接，导出为csv文件&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;SingleFile 批量下载链接网页  &lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
</description>
        
      
      
      
      <content:encoded><![CDATA[<p>使用两个工具</p><ol><li><p>web scraper 批量获取文章的链接，导出为csv文件</p></li><li><p>SingleFile 批量下载链接网页  </p></li></ol>]]></content:encoded>
      
      
      
      
      <comments>https://rancho333.github.io/2022/08/24/%E5%8D%8A%E8%87%AA%E5%8A%A8%E5%8C%96%E6%89%B9%E9%87%8F%E4%BF%9D%E5%AD%98%E7%BD%91%E9%A1%B5/#disqus_thread</comments>
      
    </item>
    
  </channel>
</rss>
